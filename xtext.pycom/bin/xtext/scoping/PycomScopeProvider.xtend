/*
 * generated by Xtext 2.16.0
 */
package xtext.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import xtext.pycom.ActuatorFunction
import xtext.pycom.PycomPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import xtext.pycom.ActuatorType
import xtext.pycom.SensorFunction
import xtext.pycom.SensorType

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class PycomScopeProvider extends AbstractPycomScopeProvider {

	override getScope(EObject context, EReference reference) {
		if(context instanceof ActuatorFunction && reference == Literals.ACTUATOR_FUNCTION__ACTUATOR_TYPE){
			val board = (context as ActuatorFunction).board
			val candidates = EcoreUtil2.getAllContentsOfType(board, ActuatorType)			
			return Scopes.scopeFor(candidates);
		}
		
		if(context instanceof SensorFunction && reference == Literals.SENSOR_FUNCTION__SENSOR_TYPE){
			val board = (context as SensorFunction).board
			val candidates = EcoreUtil2.getAllContentsOfType(board, SensorType)			
			return Scopes.scopeFor(candidates);
		}
		
		return super.getScope(context, reference)
	}

}
