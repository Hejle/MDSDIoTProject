/*
 * generated by Xtext 2.17.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PycomGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBoardsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBoardsBoardParserRuleCall_0_0 = (RuleCall)cBoardsAssignment_0.eContents().get(0);
		private final Assignment cServersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cServersServerParserRuleCall_1_0 = (RuleCall)cServersAssignment_1.eContents().get(0);
		
		//System:
		//	boards+=Board* servers+=Server*;
		@Override public ParserRule getRule() { return rule; }
		
		//boards+=Board* servers+=Server*
		public Group getGroup() { return cGroup; }
		
		//boards+=Board*
		public Assignment getBoardsAssignment_0() { return cBoardsAssignment_0; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_0_0() { return cBoardsBoardParserRuleCall_0_0; }
		
		//servers+=Server*
		public Assignment getServersAssignment_1() { return cServersAssignment_1; }
		
		//Server
		public RuleCall getServersServerParserRuleCall_1_0() { return cServersServerParserRuleCall_1_0; }
	}
	public class ServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Server");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConnConnectionParserRuleCall_3_0 = (RuleCall)cConnAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpsConditionalActionParserRuleCall_6_0 = (RuleCall)cExpsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Server:
		//	'Server' name=ID '(' conn=Connection ')' '{' exps+=ConditionalAction* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Server' name=ID '(' conn=Connection ')' '{' exps+=ConditionalAction* '}'
		public Group getGroup() { return cGroup; }
		
		//'Server'
		public Keyword getServerKeyword_0() { return cServerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//conn=Connection
		public Assignment getConnAssignment_3() { return cConnAssignment_3; }
		
		//Connection
		public RuleCall getConnConnectionParserRuleCall_3_0() { return cConnConnectionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//exps+=ConditionalAction*
		public Assignment getExpsAssignment_6() { return cExpsAssignment_6; }
		
		//ConditionalAction
		public RuleCall getExpsConditionalActionParserRuleCall_6_0() { return cExpsConditionalActionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIpAdrAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cIpAdrIpaddressParserRuleCall_0_0_0 = (RuleCall)cIpAdrAssignment_0_0.eContents().get(0);
		private final Assignment cWebsiteAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cWebsiteSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cWebsiteAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortnumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortnumberPortParserRuleCall_2_0 = (RuleCall)cPortnumberAssignment_2.eContents().get(0);
		
		//Connection:
		//	(ipAdr=Ipaddress | website=STRING) ',' portnumber=Port;
		@Override public ParserRule getRule() { return rule; }
		
		//(ipAdr=Ipaddress | website=STRING) ',' portnumber=Port
		public Group getGroup() { return cGroup; }
		
		//ipAdr=Ipaddress | website=STRING
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ipAdr=Ipaddress
		public Assignment getIpAdrAssignment_0_0() { return cIpAdrAssignment_0_0; }
		
		//Ipaddress
		public RuleCall getIpAdrIpaddressParserRuleCall_0_0_0() { return cIpAdrIpaddressParserRuleCall_0_0_0; }
		
		//website=STRING
		public Assignment getWebsiteAssignment_0_1() { return cWebsiteAssignment_0_1; }
		
		//STRING
		public RuleCall getWebsiteSTRINGTerminalRuleCall_0_1_0() { return cWebsiteSTRINGTerminalRuleCall_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//portnumber=Port
		public Assignment getPortnumberAssignment_2() { return cPortnumberAssignment_2; }
		
		//Port
		public RuleCall getPortnumberPortParserRuleCall_2_0() { return cPortnumberPortParserRuleCall_2_0; }
	}
	public class IpaddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Ipaddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Ipaddress:
		//	INT '.' INT '.' INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT '.' INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Port");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Port:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBoardMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoardMembersBoardMemberParserRuleCall_3_0 = (RuleCall)cBoardMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Board:
		//	'Board' name=ID '{' boardMembers+=BoardMember* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Board' name=ID '{' boardMembers+=BoardMember* '}'
		public Group getGroup() { return cGroup; }
		
		//'Board'
		public Keyword getBoardKeyword_0() { return cBoardKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//boardMembers+=BoardMember*
		public Assignment getBoardMembersAssignment_3() { return cBoardMembersAssignment_3; }
		
		//BoardMember
		public RuleCall getBoardMembersBoardMemberParserRuleCall_3_0() { return cBoardMembersBoardMemberParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BoardMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.BoardMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommunicationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoardMember:
		//	Sensor | Actuator | Communication;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator | Communication
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
		
		//Communication
		public RuleCall getCommunicationParserRuleCall_2() { return cCommunicationParserRuleCall_2; }
	}
	public class ConditionalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ConditionalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cExpMembersAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cExpMembersExpMemberParserRuleCall_0_5_0 = (RuleCall)cExpMembersAssignment_0_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cWhileKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExpMembersAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpMembersExpMemberParserRuleCall_1_5_0 = (RuleCall)cExpMembersAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//ConditionalAction:
		//	'if' '(' Condition ')' '{' ExpMembers+=ExpMember* '}' | 'while' '(' Condition ')' '{' ExpMembers+=ExpMember* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' Condition ')' '{' ExpMembers+=ExpMember* '}' | 'while' '(' Condition ')' '{' ExpMembers+=ExpMember* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'if' '(' Condition ')' '{' ExpMembers+=ExpMember* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0_2() { return cConditionParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_4() { return cLeftCurlyBracketKeyword_0_4; }
		
		//ExpMembers+=ExpMember*
		public Assignment getExpMembersAssignment_0_5() { return cExpMembersAssignment_0_5; }
		
		//ExpMember
		public RuleCall getExpMembersExpMemberParserRuleCall_0_5_0() { return cExpMembersExpMemberParserRuleCall_0_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }
		
		//'while' '(' Condition ')' '{' ExpMembers+=ExpMember* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'while'
		public Keyword getWhileKeyword_1_0() { return cWhileKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1_2() { return cConditionParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//ExpMembers+=ExpMember*
		public Assignment getExpMembersAssignment_1_5() { return cExpMembersAssignment_1_5; }
		
		//ExpMember
		public RuleCall getExpMembersExpMemberParserRuleCall_1_5_0() { return cExpMembersExpMemberParserRuleCall_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}
	public class ExpMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ExpMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpMember:
		//	Function | ConditionalAction;
		@Override public ParserRule getRule() { return rule; }
		
		//Function | ConditionalAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//ConditionalAction
		public RuleCall getConditionalActionParserRuleCall_1() { return cConditionalActionParserRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSensorTypesSensorTypeParserRuleCall_1_0 = (RuleCall)cSensorTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorTypesSensorTypeParserRuleCall_2_1_0 = (RuleCall)cSensorTypesAssignment_2_1.eContents().get(0);
		
		//Sensor:
		//	'Sensor' sensorTypes+=SensorType (',' sensorTypes+=SensorType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' sensorTypes+=SensorType (',' sensorTypes+=SensorType)*
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//sensorTypes+=SensorType
		public Assignment getSensorTypesAssignment_1() { return cSensorTypesAssignment_1; }
		
		//SensorType
		public RuleCall getSensorTypesSensorTypeParserRuleCall_1_0() { return cSensorTypesSensorTypeParserRuleCall_1_0; }
		
		//(',' sensorTypes+=SensorType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//sensorTypes+=SensorType
		public Assignment getSensorTypesAssignment_2_1() { return cSensorTypesAssignment_2_1; }
		
		//SensorType
		public RuleCall getSensorTypesSensorTypeParserRuleCall_2_1_0() { return cSensorTypesSensorTypeParserRuleCall_2_1_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActuatorTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActuatorTypesActuatorTypeParserRuleCall_1_0 = (RuleCall)cActuatorTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActuatorTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActuatorTypesActuatorTypeParserRuleCall_2_1_0 = (RuleCall)cActuatorTypesAssignment_2_1.eContents().get(0);
		
		//Actuator:
		//	'Actuator' actuatorTypes+=ActuatorType (',' actuatorTypes+=ActuatorType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Actuator' actuatorTypes+=ActuatorType (',' actuatorTypes+=ActuatorType)*
		public Group getGroup() { return cGroup; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//actuatorTypes+=ActuatorType
		public Assignment getActuatorTypesAssignment_1() { return cActuatorTypesAssignment_1; }
		
		//ActuatorType
		public RuleCall getActuatorTypesActuatorTypeParserRuleCall_1_0() { return cActuatorTypesActuatorTypeParserRuleCall_1_0; }
		
		//(',' actuatorTypes+=ActuatorType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//actuatorTypes+=ActuatorType
		public Assignment getActuatorTypesAssignment_2_1() { return cActuatorTypesAssignment_2_1; }
		
		//ActuatorType
		public RuleCall getActuatorTypesActuatorTypeParserRuleCall_2_1_0() { return cActuatorTypesActuatorTypeParserRuleCall_2_1_0; }
	}
	public class CommunicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Communication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommunicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cWiFiKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cBluetoothKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cSigFoxKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		
		//Communication:
		//	'Communication' ':' ('WiFi' | 'Bluetooth' | 'SigFox');
		@Override public ParserRule getRule() { return rule; }
		
		//'Communication' ':' ('WiFi' | 'Bluetooth' | 'SigFox')
		public Group getGroup() { return cGroup; }
		
		//'Communication'
		public Keyword getCommunicationKeyword_0() { return cCommunicationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'WiFi' | 'Bluetooth' | 'SigFox'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'WiFi'
		public Keyword getWiFiKeyword_2_0() { return cWiFiKeyword_2_0; }
		
		//'Bluetooth'
		public Keyword getBluetoothKeyword_2_1() { return cBluetoothKeyword_2_1; }
		
		//'SigFox'
		public Keyword getSigFoxKeyword_2_2() { return cSigFoxKeyword_2_2; }
	}
	public class ActuatorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ActuatorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeNameActuatorNameParserRuleCall_0_0 = (RuleCall)cTypeNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPinsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_3_1_0 = (RuleCall)cPinsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ActuatorType:
		//	typeName=ActuatorName ':' name=ID ('(' pins+=Pin ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=ActuatorName ':' name=ID ('(' pins+=Pin ')')?
		public Group getGroup() { return cGroup; }
		
		//typeName=ActuatorName
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//ActuatorName
		public RuleCall getTypeNameActuatorNameParserRuleCall_0_0() { return cTypeNameActuatorNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' pins+=Pin ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//pins+=Pin
		public Assignment getPinsAssignment_3_1() { return cPinsAssignment_3_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_3_1_0() { return cPinsPinParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class SensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.SensorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeNameSensorNameParserRuleCall_0_0 = (RuleCall)cTypeNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPinsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_3_1_0 = (RuleCall)cPinsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SensorType:
		//	typeName=SensorName ':' name=ID ('(' pins+=Pin ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=SensorName ':' name=ID ('(' pins+=Pin ')')?
		public Group getGroup() { return cGroup; }
		
		//typeName=SensorName
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//SensorName
		public RuleCall getTypeNameSensorNameParserRuleCall_0_0() { return cTypeNameSensorNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' pins+=Pin ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//pins+=Pin
		public Assignment getPinsAssignment_3_1() { return cPinsAssignment_3_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_3_1_0() { return cPinsPinParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class SensorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.SensorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLightKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTemperatureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBarometerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHumidityKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAccelerometerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//SensorName:
		//	'Light' | 'Temperature' | 'Barometer' | 'Humidity' | 'Accelerometer';
		@Override public ParserRule getRule() { return rule; }
		
		//'Light' | 'Temperature' | 'Barometer' | 'Humidity' | 'Accelerometer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Light'
		public Keyword getLightKeyword_0() { return cLightKeyword_0; }
		
		//'Temperature'
		public Keyword getTemperatureKeyword_1() { return cTemperatureKeyword_1; }
		
		//'Barometer'
		public Keyword getBarometerKeyword_2() { return cBarometerKeyword_2; }
		
		//'Humidity'
		public Keyword getHumidityKeyword_3() { return cHumidityKeyword_3; }
		
		//'Accelerometer'
		public Keyword getAccelerometerKeyword_4() { return cAccelerometerKeyword_4; }
	}
	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Pin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPowerINTTerminalRuleCall_0_0 = (RuleCall)cPowerAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputINTTerminalRuleCall_2_0 = (RuleCall)cInputAssignment_2.eContents().get(0);
		
		//Pin:
		//	power=INT ',' input=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//power=INT ',' input=INT
		public Group getGroup() { return cGroup; }
		
		//power=INT
		public Assignment getPowerAssignment_0() { return cPowerAssignment_0; }
		
		//INT
		public RuleCall getPowerINTTerminalRuleCall_0_0() { return cPowerINTTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//input=INT
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//INT
		public RuleCall getInputINTTerminalRuleCall_2_0() { return cInputINTTerminalRuleCall_2_0; }
	}
	public class ActuatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ActuatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLEDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEngineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ActuatorName:
		//	'LED' | 'Engine';
		@Override public ParserRule getRule() { return rule; }
		
		//'LED' | 'Engine'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'LED'
		public Keyword getLEDKeyword_0() { return cLEDKeyword_0; }
		
		//'Engine'
		public Keyword getEngineKeyword_1() { return cEngineKeyword_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLogicExpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_1_2_0 = (RuleCall)cConditionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLogicExpParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConditionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_2_0 = (RuleCall)cConditionAssignment_2_2.eContents().get(0);
		
		//Condition:
		//	LogicExp | LogicExp '&&' condition=Condition | LogicExp '||' condition=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicExp | LogicExp '&&' condition=Condition | LogicExp '||' condition=Condition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicExp
		public RuleCall getLogicExpParserRuleCall_0() { return cLogicExpParserRuleCall_0; }
		
		//LogicExp '&&' condition=Condition
		public Group getGroup_1() { return cGroup_1; }
		
		//LogicExp
		public RuleCall getLogicExpParserRuleCall_1_0() { return cLogicExpParserRuleCall_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_2() { return cConditionAssignment_1_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_2_0() { return cConditionConditionParserRuleCall_1_2_0; }
		
		//LogicExp '||' condition=Condition
		public Group getGroup_2() { return cGroup_2; }
		
		//LogicExp
		public RuleCall getLogicExpParserRuleCall_2_0() { return cLogicExpParserRuleCall_2_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_2_1() { return cVerticalLineVerticalLineKeyword_2_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2_2() { return cConditionAssignment_2_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_2_0() { return cConditionConditionParserRuleCall_2_2_0; }
	}
	public class LogicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.LogicExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparisonExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LogicExp:
		//	Boolean | ComparisonExp;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean | ComparisonExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_0() { return cBooleanParserRuleCall_0; }
		
		//ComparisonExp
		public RuleCall getComparisonExpParserRuleCall_1() { return cComparisonExpParserRuleCall_1; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//Boolean:
		//	value='true' | value='false';
		@Override public ParserRule getRule() { return rule; }
		
		//value='true' | value='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value='true'
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//value='false'
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'false'
		public Keyword getValueFalseKeyword_1_0() { return cValueFalseKeyword_1_0; }
	}
	public class ComparisonExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ComparisonExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperatorParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRigthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRigthExpressionParserRuleCall_2_0 = (RuleCall)cRigthAssignment_2.eContents().get(0);
		
		//ComparisonExp:
		//	left=Expression op=Operator rigth=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Expression op=Operator rigth=Expression
		public Group getGroup() { return cGroup; }
		
		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }
		
		//op=Operator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_1_0() { return cOpOperatorParserRuleCall_1_0; }
		
		//rigth=Expression
		public Assignment getRigthAssignment_2() { return cRigthAssignment_2; }
		
		//Expression
		public RuleCall getRigthExpressionParserRuleCall_2_0() { return cRigthExpressionParserRuleCall_2_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Operator:
		//	'<' | '<=' | '==' | '>=' | '>' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '<=' | '==' | '>=' | '>' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	INT | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActuatorFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSensorFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBoardAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cBoardBoardCrossReference_2_0_0 = (CrossReference)cBoardAssignment_2_0.eContents().get(0);
		private final RuleCall cBoardBoardIDTerminalRuleCall_2_0_0_1 = (RuleCall)cBoardBoardCrossReference_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cBoardFunctionNameParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//Function:
		//	ActuatorFunction | SensorFunction | board=[Board] '.' BoardFunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//ActuatorFunction | SensorFunction | board=[Board] '.' BoardFunctionName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActuatorFunction
		public RuleCall getActuatorFunctionParserRuleCall_0() { return cActuatorFunctionParserRuleCall_0; }
		
		//SensorFunction
		public RuleCall getSensorFunctionParserRuleCall_1() { return cSensorFunctionParserRuleCall_1; }
		
		//board=[Board] '.' BoardFunctionName
		public Group getGroup_2() { return cGroup_2; }
		
		//board=[Board]
		public Assignment getBoardAssignment_2_0() { return cBoardAssignment_2_0; }
		
		//[Board]
		public CrossReference getBoardBoardCrossReference_2_0_0() { return cBoardBoardCrossReference_2_0_0; }
		
		//ID
		public RuleCall getBoardBoardIDTerminalRuleCall_2_0_0_1() { return cBoardBoardIDTerminalRuleCall_2_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//BoardFunctionName
		public RuleCall getBoardFunctionNameParserRuleCall_2_2() { return cBoardFunctionNameParserRuleCall_2_2; }
	}
	public class ActuatorFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ActuatorFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBoardAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cBoardBoardCrossReference_0_0_0 = (CrossReference)cBoardAssignment_0_0.eContents().get(0);
		private final RuleCall cBoardBoardIDTerminalRuleCall_0_0_0_1 = (RuleCall)cBoardBoardCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActuatorTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cActuatorTypeActuatorTypeCrossReference_0_2_0 = (CrossReference)cActuatorTypeAssignment_0_2.eContents().get(0);
		private final RuleCall cActuatorTypeActuatorTypeIDTerminalRuleCall_0_2_0_1 = (RuleCall)cActuatorTypeActuatorTypeCrossReference_0_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cActuatorFunctionNameParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cActuatorTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cActuatorTypeActuatorTypeCrossReference_1_0_0 = (CrossReference)cActuatorTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cActuatorTypeActuatorTypeIDTerminalRuleCall_1_0_0_1 = (RuleCall)cActuatorTypeActuatorTypeCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cActuatorFunctionNameParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ActuatorFunction:
		//	board=[Board] '.' actuatorType=[ActuatorType] '.' ActuatorFunctionName | actuatorType=[ActuatorType] '.'
		//	ActuatorFunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//board=[Board] '.' actuatorType=[ActuatorType] '.' ActuatorFunctionName | actuatorType=[ActuatorType] '.'
		//ActuatorFunctionName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//board=[Board] '.' actuatorType=[ActuatorType] '.' ActuatorFunctionName
		public Group getGroup_0() { return cGroup_0; }
		
		//board=[Board]
		public Assignment getBoardAssignment_0_0() { return cBoardAssignment_0_0; }
		
		//[Board]
		public CrossReference getBoardBoardCrossReference_0_0_0() { return cBoardBoardCrossReference_0_0_0; }
		
		//ID
		public RuleCall getBoardBoardIDTerminalRuleCall_0_0_0_1() { return cBoardBoardIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//actuatorType=[ActuatorType]
		public Assignment getActuatorTypeAssignment_0_2() { return cActuatorTypeAssignment_0_2; }
		
		//[ActuatorType]
		public CrossReference getActuatorTypeActuatorTypeCrossReference_0_2_0() { return cActuatorTypeActuatorTypeCrossReference_0_2_0; }
		
		//ID
		public RuleCall getActuatorTypeActuatorTypeIDTerminalRuleCall_0_2_0_1() { return cActuatorTypeActuatorTypeIDTerminalRuleCall_0_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_3() { return cFullStopKeyword_0_3; }
		
		//ActuatorFunctionName
		public RuleCall getActuatorFunctionNameParserRuleCall_0_4() { return cActuatorFunctionNameParserRuleCall_0_4; }
		
		//actuatorType=[ActuatorType] '.' ActuatorFunctionName
		public Group getGroup_1() { return cGroup_1; }
		
		//actuatorType=[ActuatorType]
		public Assignment getActuatorTypeAssignment_1_0() { return cActuatorTypeAssignment_1_0; }
		
		//[ActuatorType]
		public CrossReference getActuatorTypeActuatorTypeCrossReference_1_0_0() { return cActuatorTypeActuatorTypeCrossReference_1_0_0; }
		
		//ID
		public RuleCall getActuatorTypeActuatorTypeIDTerminalRuleCall_1_0_0_1() { return cActuatorTypeActuatorTypeIDTerminalRuleCall_1_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ActuatorFunctionName
		public RuleCall getActuatorFunctionNameParserRuleCall_1_2() { return cActuatorFunctionNameParserRuleCall_1_2; }
	}
	public class SensorFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.SensorFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBoardAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cBoardBoardCrossReference_0_0_0 = (CrossReference)cBoardAssignment_0_0.eContents().get(0);
		private final RuleCall cBoardBoardIDTerminalRuleCall_0_0_0_1 = (RuleCall)cBoardBoardCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSensorTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cSensorTypeSensorTypeCrossReference_0_2_0 = (CrossReference)cSensorTypeAssignment_0_2.eContents().get(0);
		private final RuleCall cSensorTypeSensorTypeIDTerminalRuleCall_0_2_0_1 = (RuleCall)cSensorTypeSensorTypeCrossReference_0_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cSensorFunctionNameParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSensorTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cSensorTypeSensorTypeCrossReference_1_0_0 = (CrossReference)cSensorTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cSensorTypeSensorTypeIDTerminalRuleCall_1_0_0_1 = (RuleCall)cSensorTypeSensorTypeCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cSensorFunctionNameParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//SensorFunction:
		//	board=[Board] '.' sensorType=[SensorType] '.' SensorFunctionName | sensorType=[SensorType] '.' SensorFunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//board=[Board] '.' sensorType=[SensorType] '.' SensorFunctionName | sensorType=[SensorType] '.' SensorFunctionName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//board=[Board] '.' sensorType=[SensorType] '.' SensorFunctionName
		public Group getGroup_0() { return cGroup_0; }
		
		//board=[Board]
		public Assignment getBoardAssignment_0_0() { return cBoardAssignment_0_0; }
		
		//[Board]
		public CrossReference getBoardBoardCrossReference_0_0_0() { return cBoardBoardCrossReference_0_0_0; }
		
		//ID
		public RuleCall getBoardBoardIDTerminalRuleCall_0_0_0_1() { return cBoardBoardIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//sensorType=[SensorType]
		public Assignment getSensorTypeAssignment_0_2() { return cSensorTypeAssignment_0_2; }
		
		//[SensorType]
		public CrossReference getSensorTypeSensorTypeCrossReference_0_2_0() { return cSensorTypeSensorTypeCrossReference_0_2_0; }
		
		//ID
		public RuleCall getSensorTypeSensorTypeIDTerminalRuleCall_0_2_0_1() { return cSensorTypeSensorTypeIDTerminalRuleCall_0_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_3() { return cFullStopKeyword_0_3; }
		
		//SensorFunctionName
		public RuleCall getSensorFunctionNameParserRuleCall_0_4() { return cSensorFunctionNameParserRuleCall_0_4; }
		
		//sensorType=[SensorType] '.' SensorFunctionName
		public Group getGroup_1() { return cGroup_1; }
		
		//sensorType=[SensorType]
		public Assignment getSensorTypeAssignment_1_0() { return cSensorTypeAssignment_1_0; }
		
		//[SensorType]
		public CrossReference getSensorTypeSensorTypeCrossReference_1_0_0() { return cSensorTypeSensorTypeCrossReference_1_0_0; }
		
		//ID
		public RuleCall getSensorTypeSensorTypeIDTerminalRuleCall_1_0_0_1() { return cSensorTypeSensorTypeIDTerminalRuleCall_1_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//SensorFunctionName
		public RuleCall getSensorFunctionNameParserRuleCall_1_2() { return cSensorFunctionNameParserRuleCall_1_2; }
	}
	public class SensorFunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.SensorFunctionName");
		private final Keyword cSensorFunctionNameKeyword = (Keyword)rule.eContents().get(1);
		
		//SensorFunctionName:
		//	'SensorFunctionName';
		@Override public ParserRule getRule() { return rule; }
		
		//'SensorFunctionName'
		public Keyword getSensorFunctionNameKeyword() { return cSensorFunctionNameKeyword; }
	}
	public class ActuatorFunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ActuatorFunctionName");
		private final Keyword cActuatorFunctionNameKeyword = (Keyword)rule.eContents().get(1);
		
		//ActuatorFunctionName:
		//	'ActuatorFunctionName';
		@Override public ParserRule getRule() { return rule; }
		
		//'ActuatorFunctionName'
		public Keyword getActuatorFunctionNameKeyword() { return cActuatorFunctionNameKeyword; }
	}
	public class BoardFunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.BoardFunctionName");
		private final Keyword cBoardFunctionNameKeyword = (Keyword)rule.eContents().get(1);
		
		//BoardFunctionName:
		//	'BoardFunctionName';
		@Override public ParserRule getRule() { return rule; }
		
		//'BoardFunctionName'
		public Keyword getBoardFunctionNameKeyword() { return cBoardFunctionNameKeyword; }
	}
	
	
	private final SystemElements pSystem;
	private final ServerElements pServer;
	private final ConnectionElements pConnection;
	private final IpaddressElements pIpaddress;
	private final PortElements pPort;
	private final BoardElements pBoard;
	private final BoardMemberElements pBoardMember;
	private final ConditionalActionElements pConditionalAction;
	private final ExpMemberElements pExpMember;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final CommunicationElements pCommunication;
	private final ActuatorTypeElements pActuatorType;
	private final SensorTypeElements pSensorType;
	private final SensorNameElements pSensorName;
	private final PinElements pPin;
	private final ActuatorNameElements pActuatorName;
	private final ConditionElements pCondition;
	private final LogicExpElements pLogicExp;
	private final BooleanElements pBoolean;
	private final ComparisonExpElements pComparisonExp;
	private final OperatorElements pOperator;
	private final ExpressionElements pExpression;
	private final FunctionElements pFunction;
	private final ActuatorFunctionElements pActuatorFunction;
	private final SensorFunctionElements pSensorFunction;
	private final SensorFunctionNameElements pSensorFunctionName;
	private final ActuatorFunctionNameElements pActuatorFunctionName;
	private final BoardFunctionNameElements pBoardFunctionName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PycomGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pServer = new ServerElements();
		this.pConnection = new ConnectionElements();
		this.pIpaddress = new IpaddressElements();
		this.pPort = new PortElements();
		this.pBoard = new BoardElements();
		this.pBoardMember = new BoardMemberElements();
		this.pConditionalAction = new ConditionalActionElements();
		this.pExpMember = new ExpMemberElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pCommunication = new CommunicationElements();
		this.pActuatorType = new ActuatorTypeElements();
		this.pSensorType = new SensorTypeElements();
		this.pSensorName = new SensorNameElements();
		this.pPin = new PinElements();
		this.pActuatorName = new ActuatorNameElements();
		this.pCondition = new ConditionElements();
		this.pLogicExp = new LogicExpElements();
		this.pBoolean = new BooleanElements();
		this.pComparisonExp = new ComparisonExpElements();
		this.pOperator = new OperatorElements();
		this.pExpression = new ExpressionElements();
		this.pFunction = new FunctionElements();
		this.pActuatorFunction = new ActuatorFunctionElements();
		this.pSensorFunction = new SensorFunctionElements();
		this.pSensorFunctionName = new SensorFunctionNameElements();
		this.pActuatorFunctionName = new ActuatorFunctionNameElements();
		this.pBoardFunctionName = new BoardFunctionNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.Pycom".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	boards+=Board* servers+=Server*;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Server:
	//	'Server' name=ID '(' conn=Connection ')' '{' exps+=ConditionalAction* '}';
	public ServerElements getServerAccess() {
		return pServer;
	}
	
	public ParserRule getServerRule() {
		return getServerAccess().getRule();
	}
	
	//Connection:
	//	(ipAdr=Ipaddress | website=STRING) ',' portnumber=Port;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//Ipaddress:
	//	INT '.' INT '.' INT '.' INT;
	public IpaddressElements getIpaddressAccess() {
		return pIpaddress;
	}
	
	public ParserRule getIpaddressRule() {
		return getIpaddressAccess().getRule();
	}
	
	//Port:
	//	INT;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Board:
	//	'Board' name=ID '{' boardMembers+=BoardMember* '}';
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//BoardMember:
	//	Sensor | Actuator | Communication;
	public BoardMemberElements getBoardMemberAccess() {
		return pBoardMember;
	}
	
	public ParserRule getBoardMemberRule() {
		return getBoardMemberAccess().getRule();
	}
	
	//ConditionalAction:
	//	'if' '(' Condition ')' '{' ExpMembers+=ExpMember* '}' | 'while' '(' Condition ')' '{' ExpMembers+=ExpMember* '}';
	public ConditionalActionElements getConditionalActionAccess() {
		return pConditionalAction;
	}
	
	public ParserRule getConditionalActionRule() {
		return getConditionalActionAccess().getRule();
	}
	
	//ExpMember:
	//	Function | ConditionalAction;
	public ExpMemberElements getExpMemberAccess() {
		return pExpMember;
	}
	
	public ParserRule getExpMemberRule() {
		return getExpMemberAccess().getRule();
	}
	
	//Sensor:
	//	'Sensor' sensorTypes+=SensorType (',' sensorTypes+=SensorType)*;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator:
	//	'Actuator' actuatorTypes+=ActuatorType (',' actuatorTypes+=ActuatorType)*;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Communication:
	//	'Communication' ':' ('WiFi' | 'Bluetooth' | 'SigFox');
	public CommunicationElements getCommunicationAccess() {
		return pCommunication;
	}
	
	public ParserRule getCommunicationRule() {
		return getCommunicationAccess().getRule();
	}
	
	//ActuatorType:
	//	typeName=ActuatorName ':' name=ID ('(' pins+=Pin ')')?;
	public ActuatorTypeElements getActuatorTypeAccess() {
		return pActuatorType;
	}
	
	public ParserRule getActuatorTypeRule() {
		return getActuatorTypeAccess().getRule();
	}
	
	//SensorType:
	//	typeName=SensorName ':' name=ID ('(' pins+=Pin ')')?;
	public SensorTypeElements getSensorTypeAccess() {
		return pSensorType;
	}
	
	public ParserRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//SensorName:
	//	'Light' | 'Temperature' | 'Barometer' | 'Humidity' | 'Accelerometer';
	public SensorNameElements getSensorNameAccess() {
		return pSensorName;
	}
	
	public ParserRule getSensorNameRule() {
		return getSensorNameAccess().getRule();
	}
	
	//Pin:
	//	power=INT ',' input=INT;
	public PinElements getPinAccess() {
		return pPin;
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}
	
	//ActuatorName:
	//	'LED' | 'Engine';
	public ActuatorNameElements getActuatorNameAccess() {
		return pActuatorName;
	}
	
	public ParserRule getActuatorNameRule() {
		return getActuatorNameAccess().getRule();
	}
	
	//Condition:
	//	LogicExp | LogicExp '&&' condition=Condition | LogicExp '||' condition=Condition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//LogicExp:
	//	Boolean | ComparisonExp;
	public LogicExpElements getLogicExpAccess() {
		return pLogicExp;
	}
	
	public ParserRule getLogicExpRule() {
		return getLogicExpAccess().getRule();
	}
	
	//Boolean:
	//	value='true' | value='false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//ComparisonExp:
	//	left=Expression op=Operator rigth=Expression;
	public ComparisonExpElements getComparisonExpAccess() {
		return pComparisonExp;
	}
	
	public ParserRule getComparisonExpRule() {
		return getComparisonExpAccess().getRule();
	}
	
	//Operator:
	//	'<' | '<=' | '==' | '>=' | '>' | '!=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Expression:
	//	INT | Function;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Function:
	//	ActuatorFunction | SensorFunction | board=[Board] '.' BoardFunctionName;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//ActuatorFunction:
	//	board=[Board] '.' actuatorType=[ActuatorType] '.' ActuatorFunctionName | actuatorType=[ActuatorType] '.'
	//	ActuatorFunctionName;
	public ActuatorFunctionElements getActuatorFunctionAccess() {
		return pActuatorFunction;
	}
	
	public ParserRule getActuatorFunctionRule() {
		return getActuatorFunctionAccess().getRule();
	}
	
	//SensorFunction:
	//	board=[Board] '.' sensorType=[SensorType] '.' SensorFunctionName | sensorType=[SensorType] '.' SensorFunctionName;
	public SensorFunctionElements getSensorFunctionAccess() {
		return pSensorFunction;
	}
	
	public ParserRule getSensorFunctionRule() {
		return getSensorFunctionAccess().getRule();
	}
	
	//SensorFunctionName:
	//	'SensorFunctionName';
	public SensorFunctionNameElements getSensorFunctionNameAccess() {
		return pSensorFunctionName;
	}
	
	public ParserRule getSensorFunctionNameRule() {
		return getSensorFunctionNameAccess().getRule();
	}
	
	//ActuatorFunctionName:
	//	'ActuatorFunctionName';
	public ActuatorFunctionNameElements getActuatorFunctionNameAccess() {
		return pActuatorFunctionName;
	}
	
	public ParserRule getActuatorFunctionNameRule() {
		return getActuatorFunctionNameAccess().getRule();
	}
	
	//BoardFunctionName:
	//	'BoardFunctionName';
	public BoardFunctionNameElements getBoardFunctionNameAccess() {
		return pBoardFunctionName;
	}
	
	public ParserRule getBoardFunctionNameRule() {
		return getBoardFunctionNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
