/*
 * generated by Xtext 2.17.0
 */
package xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import xtext.services.PycomGrammarAccess;

@SuppressWarnings("all")
public class PycomSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PycomGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConditionalAction___IfKeyword_0_0_LeftParenthesisKeyword_0_1___or___WhileKeyword_1_0_LeftParenthesisKeyword_1_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PycomGrammarAccess) access;
		match_ConditionalAction___IfKeyword_0_0_LeftParenthesisKeyword_0_1___or___WhileKeyword_1_0_LeftParenthesisKeyword_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConditionalActionAccess().getIfKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConditionalActionAccess().getWhileKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_1_1())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getActuatorFunctionNameRule())
			return getActuatorFunctionNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBoardFunctionNameRule())
			return getBoardFunctionNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCommunicationRule())
			return getCommunicationToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSensorFunctionNameRule())
			return getSensorFunctionNameToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ActuatorFunctionName:
	 * 	'ActuatorFunctionName';
	 */
	protected String getActuatorFunctionNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ActuatorFunctionName";
	}
	
	/**
	 * BoardFunctionName:
	 * 	'BoardFunctionName';
	 */
	protected String getBoardFunctionNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "BoardFunctionName";
	}
	
	/**
	 * Communication:
	 * 	'Communication' ':' ('WiFi' | 'Bluetooth' | 'SigFox');
	 */
	protected String getCommunicationToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Communication:WiFi";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * SensorFunctionName:
	 * 	'SensorFunctionName';
	 */
	protected String getSensorFunctionNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "SensorFunctionName";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ConditionalAction___IfKeyword_0_0_LeftParenthesisKeyword_0_1___or___WhileKeyword_1_0_LeftParenthesisKeyword_1_1__.equals(syntax))
				emit_ConditionalAction___IfKeyword_0_0_LeftParenthesisKeyword_0_1___or___WhileKeyword_1_0_LeftParenthesisKeyword_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('if' '(') | ('while' '(')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) left=Expression
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='true'
	 */
	protected void emit_ConditionalAction___IfKeyword_0_0_LeftParenthesisKeyword_0_1___or___WhileKeyword_1_0_LeftParenthesisKeyword_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
