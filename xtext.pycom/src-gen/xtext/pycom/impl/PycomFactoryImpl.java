/**
 * generated by Xtext 2.17.0
 */
package xtext.pycom.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.pycom.Actuator;
import xtext.pycom.ActuatorFunction;
import xtext.pycom.ActuatorType;
import xtext.pycom.Board;
import xtext.pycom.BoardMember;
import xtext.pycom.ComparisonExp;
import xtext.pycom.Condition;
import xtext.pycom.ConditionalAction;
import xtext.pycom.Connection;
import xtext.pycom.ExpMember;
import xtext.pycom.Expression;
import xtext.pycom.Function;
import xtext.pycom.LogicExp;
import xtext.pycom.Pin;
import xtext.pycom.PycomFactory;
import xtext.pycom.PycomPackage;
import xtext.pycom.Sensor;
import xtext.pycom.SensorFunction;
import xtext.pycom.SensorType;
import xtext.pycom.Server;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PycomFactoryImpl extends EFactoryImpl implements PycomFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PycomFactory init()
  {
    try
    {
      PycomFactory thePycomFactory = (PycomFactory)EPackage.Registry.INSTANCE.getEFactory(PycomPackage.eNS_URI);
      if (thePycomFactory != null)
      {
        return thePycomFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PycomFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PycomFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PycomPackage.SYSTEM: return createSystem();
      case PycomPackage.SERVER: return createServer();
      case PycomPackage.CONNECTION: return createConnection();
      case PycomPackage.BOARD: return createBoard();
      case PycomPackage.BOARD_MEMBER: return createBoardMember();
      case PycomPackage.CONDITIONAL_ACTION: return createConditionalAction();
      case PycomPackage.EXP_MEMBER: return createExpMember();
      case PycomPackage.SENSOR: return createSensor();
      case PycomPackage.ACTUATOR: return createActuator();
      case PycomPackage.ACTUATOR_TYPE: return createActuatorType();
      case PycomPackage.SENSOR_TYPE: return createSensorType();
      case PycomPackage.PIN: return createPin();
      case PycomPackage.CONDITION: return createCondition();
      case PycomPackage.LOGIC_EXP: return createLogicExp();
      case PycomPackage.BOOLEAN: return createBoolean();
      case PycomPackage.COMPARISON_EXP: return createComparisonExp();
      case PycomPackage.EXPRESSION: return createExpression();
      case PycomPackage.FUNCTION: return createFunction();
      case PycomPackage.ACTUATOR_FUNCTION: return createActuatorFunction();
      case PycomPackage.SENSOR_FUNCTION: return createSensorFunction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public xtext.pycom.System createSystem()
  {
    SystemImpl system = new SystemImpl();
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Server createServer()
  {
    ServerImpl server = new ServerImpl();
    return server;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connection createConnection()
  {
    ConnectionImpl connection = new ConnectionImpl();
    return connection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Board createBoard()
  {
    BoardImpl board = new BoardImpl();
    return board;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoardMember createBoardMember()
  {
    BoardMemberImpl boardMember = new BoardMemberImpl();
    return boardMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalAction createConditionalAction()
  {
    ConditionalActionImpl conditionalAction = new ConditionalActionImpl();
    return conditionalAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpMember createExpMember()
  {
    ExpMemberImpl expMember = new ExpMemberImpl();
    return expMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sensor createSensor()
  {
    SensorImpl sensor = new SensorImpl();
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actuator createActuator()
  {
    ActuatorImpl actuator = new ActuatorImpl();
    return actuator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActuatorType createActuatorType()
  {
    ActuatorTypeImpl actuatorType = new ActuatorTypeImpl();
    return actuatorType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SensorType createSensorType()
  {
    SensorTypeImpl sensorType = new SensorTypeImpl();
    return sensorType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pin createPin()
  {
    PinImpl pin = new PinImpl();
    return pin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicExp createLogicExp()
  {
    LogicExpImpl logicExp = new LogicExpImpl();
    return logicExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public xtext.pycom.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExp createComparisonExp()
  {
    ComparisonExpImpl comparisonExp = new ComparisonExpImpl();
    return comparisonExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActuatorFunction createActuatorFunction()
  {
    ActuatorFunctionImpl actuatorFunction = new ActuatorFunctionImpl();
    return actuatorFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SensorFunction createSensorFunction()
  {
    SensorFunctionImpl sensorFunction = new SensorFunctionImpl();
    return sensorFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PycomPackage getPycomPackage()
  {
    return (PycomPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PycomPackage getPackage()
  {
    return PycomPackage.eINSTANCE;
  }

} //PycomFactoryImpl
