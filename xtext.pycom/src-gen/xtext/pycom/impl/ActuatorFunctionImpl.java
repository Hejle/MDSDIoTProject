/**
 * generated by Xtext 2.16.0
 */
package xtext.pycom.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.pycom.ActuatorFunction;
import xtext.pycom.ActuatorType;
import xtext.pycom.PycomPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Actuator Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.pycom.impl.ActuatorFunctionImpl#getActuatorType <em>Actuator Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActuatorFunctionImpl extends FunctionImpl implements ActuatorFunction
{
  /**
   * The cached value of the '{@link #getActuatorType() <em>Actuator Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActuatorType()
   * @generated
   * @ordered
   */
  protected ActuatorType actuatorType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActuatorFunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PycomPackage.Literals.ACTUATOR_FUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActuatorType getActuatorType()
  {
    if (actuatorType != null && actuatorType.eIsProxy())
    {
      InternalEObject oldActuatorType = (InternalEObject)actuatorType;
      actuatorType = (ActuatorType)eResolveProxy(oldActuatorType);
      if (actuatorType != oldActuatorType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, PycomPackage.ACTUATOR_FUNCTION__ACTUATOR_TYPE, oldActuatorType, actuatorType));
      }
    }
    return actuatorType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActuatorType basicGetActuatorType()
  {
    return actuatorType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActuatorType(ActuatorType newActuatorType)
  {
    ActuatorType oldActuatorType = actuatorType;
    actuatorType = newActuatorType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.ACTUATOR_FUNCTION__ACTUATOR_TYPE, oldActuatorType, actuatorType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR_FUNCTION__ACTUATOR_TYPE:
        if (resolve) return getActuatorType();
        return basicGetActuatorType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR_FUNCTION__ACTUATOR_TYPE:
        setActuatorType((ActuatorType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR_FUNCTION__ACTUATOR_TYPE:
        setActuatorType((ActuatorType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR_FUNCTION__ACTUATOR_TYPE:
        return actuatorType != null;
    }
    return super.eIsSet(featureID);
  }

} //ActuatorFunctionImpl
