/*
 * generated by Xtext 2.17.0
 */
grammar InternalPycom;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.services.PycomGrammarAccess;

}

@parser::members {

 	private PycomGrammarAccess grammarAccess;

    public InternalPycomParser(TokenStream input, PycomGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "System";
   	}

   	@Override
   	protected PycomGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getBoardsBoardParserRuleCall_0_0());
				}
				lv_boards_0_0=ruleBoard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"boards",
						lv_boards_0_0,
						"xtext.Pycom.Board");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getServersServerParserRuleCall_1_0());
				}
				lv_servers_1_0=ruleServer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"servers",
						lv_servers_1_0,
						"xtext.Pycom.Server");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleServer
entryRuleServer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServerRule()); }
	iv_ruleServer=ruleServer
	{ $current=$iv_ruleServer.current; }
	EOF;

// Rule Server
ruleServer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Server'
		{
			newLeafNode(otherlv_0, grammarAccess.getServerAccess().getServerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getServerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getServerAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServerAccess().getConnConnectionParserRuleCall_3_0());
				}
				lv_conn_3_0=ruleConnection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServerRule());
					}
					set(
						$current,
						"conn",
						lv_conn_3_0,
						"xtext.Pycom.Connection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getServerAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getServerAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServerAccess().getExpsConditionalActionParserRuleCall_6_0());
				}
				lv_exps_6_0=ruleConditionalAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServerRule());
					}
					add(
						$current,
						"exps",
						lv_exps_6_0,
						"xtext.Pycom.ConditionalAction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getServerAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	iv_ruleConnection=ruleConnection
	{ $current=$iv_ruleConnection.current; }
	EOF;

// Rule Connection
ruleConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConnectionAccess().getIpAdrIpaddressParserRuleCall_0_0_0());
					}
					lv_ipAdr_0_0=ruleIpaddress
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConnectionRule());
						}
						set(
							$current,
							"ipAdr",
							lv_ipAdr_0_0,
							"xtext.Pycom.Ipaddress");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_website_1_0=RULE_STRING
					{
						newLeafNode(lv_website_1_0, grammarAccess.getConnectionAccess().getWebsiteSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConnectionRule());
						}
						setWithLastConsumed(
							$current,
							"website",
							lv_website_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getConnectionAccess().getCommaKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectionAccess().getPortnumberPortParserRuleCall_2_0());
				}
				lv_portnumber_3_0=rulePort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectionRule());
					}
					set(
						$current,
						"portnumber",
						lv_portnumber_3_0,
						"xtext.Pycom.Port");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIpaddress
entryRuleIpaddress returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIpaddressRule()); }
	iv_ruleIpaddress=ruleIpaddress
	{ $current=$iv_ruleIpaddress.current.getText(); }
	EOF;

// Rule Ipaddress
ruleIpaddress returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIpaddressAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_2());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIpaddressAccess().getFullStopKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_4());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIpaddressAccess().getFullStopKeyword_5());
		}
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRulePort
entryRulePort returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	iv_rulePort=rulePort
	{ $current=$iv_rulePort.current.getText(); }
	EOF;

// Rule Port
rulePort returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getPortAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleBoard
entryRuleBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoardRule()); }
	iv_ruleBoard=ruleBoard
	{ $current=$iv_ruleBoard.current; }
	EOF;

// Rule Board
ruleBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Board'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoardAccess().getBoardKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBoardAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoardRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoardAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoardAccess().getBoardMembersBoardMemberParserRuleCall_3_0());
				}
				lv_boardMembers_3_0=ruleBoardMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoardRule());
					}
					add(
						$current,
						"boardMembers",
						lv_boardMembers_3_0,
						"xtext.Pycom.BoardMember");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBoardAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBoardMember
entryRuleBoardMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoardMemberRule()); }
	iv_ruleBoardMember=ruleBoardMember
	{ $current=$iv_ruleBoardMember.current; }
	EOF;

// Rule BoardMember
ruleBoardMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoardMemberAccess().getSensorParserRuleCall_0());
		}
		this_Sensor_0=ruleSensor
		{
			$current = $this_Sensor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoardMemberAccess().getActuatorParserRuleCall_1());
		}
		this_Actuator_1=ruleActuator
		{
			$current = $this_Actuator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoardMemberAccess().getCommunicationParserRuleCall_2());
		}
		ruleCommunication
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionalAction
entryRuleConditionalAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalActionRule()); }
	iv_ruleConditionalAction=ruleConditionalAction
	{ $current=$iv_ruleConditionalAction.current; }
	EOF;

// Rule ConditionalAction
ruleConditionalAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='if'
			{
				newLeafNode(otherlv_0, grammarAccess.getConditionalActionAccess().getIfKeyword_0_0());
			}
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getConditionalActionAccess().getConditionParserRuleCall_0_2());
			}
			this_Condition_2=ruleCondition
			{
				$current = $this_Condition_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getConditionalActionAccess().getRightParenthesisKeyword_0_3());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionalActionAccess().getLeftCurlyBracketKeyword_0_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalActionAccess().getExpMembersExpMemberParserRuleCall_0_5_0());
					}
					lv_ExpMembers_5_0=ruleExpMember
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalActionRule());
						}
						add(
							$current,
							"ExpMembers",
							lv_ExpMembers_5_0,
							"xtext.Pycom.ExpMember");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getConditionalActionAccess().getRightCurlyBracketKeyword_0_6());
			}
		)
		    |
		(
			otherlv_7='while'
			{
				newLeafNode(otherlv_7, grammarAccess.getConditionalActionAccess().getWhileKeyword_1_0());
			}
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getConditionalActionAccess().getConditionParserRuleCall_1_2());
			}
			this_Condition_9=ruleCondition
			{
				$current = $this_Condition_9.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getConditionalActionAccess().getRightParenthesisKeyword_1_3());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getConditionalActionAccess().getLeftCurlyBracketKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalActionAccess().getExpMembersExpMemberParserRuleCall_1_5_0());
					}
					lv_ExpMembers_12_0=ruleExpMember
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalActionRule());
						}
						add(
							$current,
							"ExpMembers",
							lv_ExpMembers_12_0,
							"xtext.Pycom.ExpMember");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_13='}'
			{
				newLeafNode(otherlv_13, grammarAccess.getConditionalActionAccess().getRightCurlyBracketKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleExpMember
entryRuleExpMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpMemberRule()); }
	iv_ruleExpMember=ruleExpMember
	{ $current=$iv_ruleExpMember.current; }
	EOF;

// Rule ExpMember
ruleExpMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpMemberAccess().getFunctionParserRuleCall_0());
		}
		this_Function_0=ruleFunction
		{
			$current = $this_Function_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpMemberAccess().getConditionalActionParserRuleCall_1());
		}
		this_ConditionalAction_1=ruleConditionalAction
		{
			$current = $this_ConditionalAction_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSensorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getSensorTypesSensorTypeParserRuleCall_1_0());
				}
				lv_sensorTypes_1_0=ruleSensorType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					add(
						$current,
						"sensorTypes",
						lv_sensorTypes_1_0,
						"xtext.Pycom.SensorType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSensorAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getSensorTypesSensorTypeParserRuleCall_2_1_0());
					}
					lv_sensorTypes_3_0=ruleSensorType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						add(
							$current,
							"sensorTypes",
							lv_sensorTypes_3_0,
							"xtext.Pycom.SensorType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleActuator
entryRuleActuator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActuatorRule()); }
	iv_ruleActuator=ruleActuator
	{ $current=$iv_ruleActuator.current; }
	EOF;

// Rule Actuator
ruleActuator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Actuator'
		{
			newLeafNode(otherlv_0, grammarAccess.getActuatorAccess().getActuatorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActuatorAccess().getActuatorTypesActuatorTypeParserRuleCall_1_0());
				}
				lv_actuatorTypes_1_0=ruleActuatorType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActuatorRule());
					}
					add(
						$current,
						"actuatorTypes",
						lv_actuatorTypes_1_0,
						"xtext.Pycom.ActuatorType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getActuatorAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActuatorAccess().getActuatorTypesActuatorTypeParserRuleCall_2_1_0());
					}
					lv_actuatorTypes_3_0=ruleActuatorType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActuatorRule());
						}
						add(
							$current,
							"actuatorTypes",
							lv_actuatorTypes_3_0,
							"xtext.Pycom.ActuatorType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCommunication
entryRuleCommunication returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommunicationRule()); }
	iv_ruleCommunication=ruleCommunication
	{ $current=$iv_ruleCommunication.current.getText(); }
	EOF;

// Rule Communication
ruleCommunication returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Communication'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommunicationAccess().getCommunicationKeyword_0());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommunicationAccess().getColonKeyword_1());
		}
		(
			kw='WiFi'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommunicationAccess().getWiFiKeyword_2_0());
			}
			    |
			kw='Bluetooth'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommunicationAccess().getBluetoothKeyword_2_1());
			}
			    |
			kw='SigFox'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommunicationAccess().getSigFoxKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleActuatorType
entryRuleActuatorType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActuatorTypeRule()); }
	iv_ruleActuatorType=ruleActuatorType
	{ $current=$iv_ruleActuatorType.current; }
	EOF;

// Rule ActuatorType
ruleActuatorType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActuatorTypeAccess().getTypeNameActuatorNameParserRuleCall_0_0());
				}
				lv_typeName_0_0=ruleActuatorName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActuatorTypeRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_0_0,
						"xtext.Pycom.ActuatorName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getActuatorTypeAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getActuatorTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActuatorTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getActuatorTypeAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActuatorTypeAccess().getPinsPinParserRuleCall_3_1_0());
					}
					lv_pins_4_0=rulePin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActuatorTypeRule());
						}
						add(
							$current,
							"pins",
							lv_pins_4_0,
							"xtext.Pycom.Pin");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getActuatorTypeAccess().getRightParenthesisKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleSensorType
entryRuleSensorType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorTypeRule()); }
	iv_ruleSensorType=ruleSensorType
	{ $current=$iv_ruleSensorType.current; }
	EOF;

// Rule SensorType
ruleSensorType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorTypeAccess().getTypeNameSensorNameParserRuleCall_0_0());
				}
				lv_typeName_0_0=ruleSensorName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorTypeRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_0_0,
						"xtext.Pycom.SensorName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getSensorTypeAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSensorTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getSensorTypeAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorTypeAccess().getPinsPinParserRuleCall_3_1_0());
					}
					lv_pins_4_0=rulePin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorTypeRule());
						}
						add(
							$current,
							"pins",
							lv_pins_4_0,
							"xtext.Pycom.Pin");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSensorTypeAccess().getRightParenthesisKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleSensorName
entryRuleSensorName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSensorNameRule()); }
	iv_ruleSensorName=ruleSensorName
	{ $current=$iv_ruleSensorName.current.getText(); }
	EOF;

// Rule SensorName
ruleSensorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Light'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSensorNameAccess().getLightKeyword_0());
		}
		    |
		kw='Temperature'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSensorNameAccess().getTemperatureKeyword_1());
		}
		    |
		kw='Barometer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSensorNameAccess().getBarometerKeyword_2());
		}
		    |
		kw='Humidity'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSensorNameAccess().getHumidityKeyword_3());
		}
		    |
		kw='Accelerometer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSensorNameAccess().getAccelerometerKeyword_4());
		}
	)
;

// Entry rule entryRulePin
entryRulePin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPinRule()); }
	iv_rulePin=rulePin
	{ $current=$iv_rulePin.current; }
	EOF;

// Rule Pin
rulePin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_power_0_0=RULE_INT
				{
					newLeafNode(lv_power_0_0, grammarAccess.getPinAccess().getPowerINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPinRule());
					}
					setWithLastConsumed(
						$current,
						"power",
						lv_power_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getPinAccess().getCommaKeyword_1());
		}
		(
			(
				lv_input_2_0=RULE_INT
				{
					newLeafNode(lv_input_2_0, grammarAccess.getPinAccess().getInputINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPinRule());
					}
					setWithLastConsumed(
						$current,
						"input",
						lv_input_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleActuatorName
entryRuleActuatorName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getActuatorNameRule()); }
	iv_ruleActuatorName=ruleActuatorName
	{ $current=$iv_ruleActuatorName.current.getText(); }
	EOF;

// Rule ActuatorName
ruleActuatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='LED'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActuatorNameAccess().getLEDKeyword_0());
		}
		    |
		kw='Engine'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getActuatorNameAccess().getEngineKeyword_1());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_0());
		}
		this_LogicExp_0=ruleLogicExp
		{
			$current = $this_LogicExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_1_0());
			}
			this_LogicExp_1=ruleLogicExp
			{
				$current = $this_LogicExp_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_1_2_0());
					}
					lv_condition_3_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"condition",
							lv_condition_3_0,
							"xtext.Pycom.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_2_0());
			}
			this_LogicExp_4=ruleLogicExp
			{
				$current = $this_LogicExp_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5='||'
			{
				newLeafNode(otherlv_5, grammarAccess.getConditionAccess().getVerticalLineVerticalLineKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_2_2_0());
					}
					lv_condition_6_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"condition",
							lv_condition_6_0,
							"xtext.Pycom.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLogicExp
entryRuleLogicExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicExpRule()); }
	iv_ruleLogicExp=ruleLogicExp
	{ $current=$iv_ruleLogicExp.current; }
	EOF;

// Rule LogicExp
ruleLogicExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicExpAccess().getBooleanParserRuleCall_0());
		}
		this_Boolean_0=ruleBoolean
		{
			$current = $this_Boolean_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicExpAccess().getComparisonExpParserRuleCall_1());
		}
		this_ComparisonExp_1=ruleComparisonExp
		{
			$current = $this_ComparisonExp_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current; }
	EOF;

// Rule Boolean
ruleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='true'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleanAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_value_1_0='false'
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanRule());
					}
					setWithLastConsumed($current, "value", lv_value_1_0, "false");
				}
			)
		)
	)
;

// Entry rule entryRuleComparisonExp
entryRuleComparisonExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpRule()); }
	iv_ruleComparisonExp=ruleComparisonExp
	{ $current=$iv_ruleComparisonExp.current; }
	EOF;

// Rule ComparisonExp
ruleComparisonExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpAccess().getLeftExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"xtext.Pycom.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpAccess().getOpOperatorParserRuleCall_1_0());
				}
				lv_op_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"xtext.Pycom.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpAccess().getRigthExpressionParserRuleCall_2_0());
				}
				lv_rigth_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpRule());
					}
					set(
						$current,
						"rigth",
						lv_rigth_2_0,
						"xtext.Pycom.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignKeyword_0());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_1());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			newLeafNode(this_INT_0, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionParserRuleCall_1());
		}
		this_Function_1=ruleFunction
		{
			$current = $this_Function_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getActuatorFunctionParserRuleCall_0());
		}
		this_ActuatorFunction_0=ruleActuatorFunction
		{
			$current = $this_ActuatorFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getSensorFunctionParserRuleCall_1());
		}
		this_SensorFunction_1=ruleSensorFunction
		{
			$current = $this_SensorFunction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getBoardBoardCrossReference_2_0_0());
					}
				)
			)
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getFullStopKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getBoardFunctionNameParserRuleCall_2_2());
			}
			ruleBoardFunctionName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleActuatorFunction
entryRuleActuatorFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActuatorFunctionRule()); }
	iv_ruleActuatorFunction=ruleActuatorFunction
	{ $current=$iv_ruleActuatorFunction.current; }
	EOF;

// Rule ActuatorFunction
ruleActuatorFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActuatorFunctionRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getActuatorFunctionAccess().getBoardBoardCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_0_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActuatorFunctionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeCrossReference_0_2_0());
					}
				)
			)
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_0_3());
			}
			{
				newCompositeNode(grammarAccess.getActuatorFunctionAccess().getActuatorFunctionNameParserRuleCall_0_4());
			}
			ruleActuatorFunctionName
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActuatorFunctionRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeCrossReference_1_0_0());
					}
				)
			)
			otherlv_6='.'
			{
				newLeafNode(otherlv_6, grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getActuatorFunctionAccess().getActuatorFunctionNameParserRuleCall_1_2());
			}
			ruleActuatorFunctionName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSensorFunction
entryRuleSensorFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorFunctionRule()); }
	iv_ruleSensorFunction=ruleSensorFunction
	{ $current=$iv_ruleSensorFunction.current; }
	EOF;

// Rule SensorFunction
ruleSensorFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSensorFunctionRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getSensorFunctionAccess().getBoardBoardCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getSensorFunctionAccess().getFullStopKeyword_0_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSensorFunctionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeCrossReference_0_2_0());
					}
				)
			)
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getSensorFunctionAccess().getFullStopKeyword_0_3());
			}
			{
				newCompositeNode(grammarAccess.getSensorFunctionAccess().getSensorFunctionNameParserRuleCall_0_4());
			}
			ruleSensorFunctionName
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSensorFunctionRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeCrossReference_1_0_0());
					}
				)
			)
			otherlv_6='.'
			{
				newLeafNode(otherlv_6, grammarAccess.getSensorFunctionAccess().getFullStopKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getSensorFunctionAccess().getSensorFunctionNameParserRuleCall_1_2());
			}
			ruleSensorFunctionName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSensorFunctionName
entryRuleSensorFunctionName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSensorFunctionNameRule()); }
	iv_ruleSensorFunctionName=ruleSensorFunctionName
	{ $current=$iv_ruleSensorFunctionName.current.getText(); }
	EOF;

// Rule SensorFunctionName
ruleSensorFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='SensorFunctionName'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSensorFunctionNameAccess().getSensorFunctionNameKeyword());
	}
;

// Entry rule entryRuleActuatorFunctionName
entryRuleActuatorFunctionName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getActuatorFunctionNameRule()); }
	iv_ruleActuatorFunctionName=ruleActuatorFunctionName
	{ $current=$iv_ruleActuatorFunctionName.current.getText(); }
	EOF;

// Rule ActuatorFunctionName
ruleActuatorFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='ActuatorFunctionName'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getActuatorFunctionNameAccess().getActuatorFunctionNameKeyword());
	}
;

// Entry rule entryRuleBoardFunctionName
entryRuleBoardFunctionName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoardFunctionNameRule()); }
	iv_ruleBoardFunctionName=ruleBoardFunctionName
	{ $current=$iv_ruleBoardFunctionName.current.getText(); }
	EOF;

// Rule BoardFunctionName
ruleBoardFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='BoardFunctionName'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBoardFunctionNameAccess().getBoardFunctionNameKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
