/*
 * generated by Xtext 2.16.0
 */
package xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import xtext.pycom.Board
import xtext.pycom.Server
import xtext.pycom.Communication
import javax.swing.JOptionPane
import xtext.pycom.Actuator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PycomGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for (board : resource.allContents.toIterable.filter(typeof(Board))) {
			fsa.generateFile(board.name + ".py", generatePycomFiles(board, resource))			
		}
				
		for (server : resource.allContents.toIterable.filter(typeof(Server))) {
			fsa.generateFile(server.name + ".js", generateServerFiles(server, resource))			
		} 				
	}
	
	//  «»
	//EzCopy
	// Single Line Generate Comment «/* Comment goes here */»
	
	def generatePycomFiles(Board b, Resource r) {
		'''
			import pycom
			import machine
			import time 
			«generatePycomImports(b, r)»
			«generatePycomCode(b, r)»
		
			pycom.heartbeat(False)
				
			for cycles in range(10): # stop after 10 cycles    
				pycom.rgbled(0x007f00) # green    
		    		time.sleep(0.5)
		    		pycom.rgbled(0x7f7f00) # yellow    
		    		time.sleep(0.5)
		    		pycom.rgbled(0x7f0000) # red    
		    		time.sleep(0.5)
		'''
	}
	
	def generatePycomImports(Board b, Resource r) { 
		var sb = new StringBuilder();
		sb.append(generatePycomConnectionImport(b, r))
		return sb.toString
	}
	
	def generatePycomActuatorImport(Board b, Resource r) {
		var sb = new StringBuilder();
		for (actuator : b.boardMembers.filter(typeof(Actuator))) {
			sb.append(generateActuatorImports(b, r))
		}
		return sb.toString
	}
	
	def generateActuatorImports(Board b, Resource r) {	
		'''
			#
		'''
	}
	
	def generatePycomConnectionImport(Board b, Resource r) {
		var sb = new StringBuilder();
		for (a : b.boardMembers.filter(Communication)) {
			if (a.type.equals("WiFi")) {
		    	sb.append(generatePycomWifiImport(b, r))
		    } else {
		    	sb.append("") //Default case for unsupported BlueThooth|SigFox
		    }
		}
		return sb.toString
	}

	def generatePycomWifiImport(Board b, Resource r) {	
		'''
			from network import WLAN
			
		'''
	}
	
	def generatePycomCode(Board b, Resource r) { 
		generatePycomConnectionCode(b, r)
	}
	
	def generatePycomConnectionCode(Board b, Resource r) {
		var sb = new StringBuilder();
		//Change to use Filters :)
		for (a : b.boardMembers.filter(Communication)) {
			if (a.type.equals("WiFi")) {
		    	sb.append(generatePycomWifiCode(b, r))
		    } else {
		    	sb.append("") //Default case for unsupported BlueThooth|SigFox
		    }
		}
	}
	
	def generatePycomWifiCode(Board b, Resource r) {
		'''
			#***WIFI SETUP***
			wlan = WLAN(mode=WLAN.STA)
			nets = wlan.scan()
			ssidname = #***YOUR SSID***
			password = #***YOUR PASSWORD***
			
			if wlan.isconnected() == False:
			    for net in nets:
			        print(net.ssid)
			        if net.ssid == ssidname:
			            wlan.connect(net.ssid, auth=(net.sec, password), timeout=5000)
			            break
			
			while not wlan.isconnected():
			    machine.idle()
			print ('wlan connection succeeded!')
			print (wlan.ifconfig())
			
			#***WIFI SETUP END***
			
		'''
	}
	
	def generateServerFiles(Server s, Resource r) '''
		var express = require('express');
		var app = express();
		var bodyParser = require('body-parser');
		app.use(bodyParser.json());
		
		// Host: «if (s.conn.host.ipAdr === null) s.conn.host.website else s.conn.host.ipAdr »
		
		app.listen(«s.conn.portnumber», () => {
		    console.log('Started on port «s.conn.portnumber»');
		});
		
		app.get("*", function(req, res){		     
		    res.send("Default get route");
		    console.log("Default get route");
		});			
		
		«FOR b : r. allContents.toIterable.filter(typeof(Board))»
			app.post('/«b.name»/:value', function(req, res)
				{        
				    var value = req.params.value;    
				    res.send("Message received: " + value);
				    console.log("Message received: " + value)    
				});
									
		«ENDFOR»		
'''		
}