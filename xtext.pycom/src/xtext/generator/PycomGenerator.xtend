/*
 * generated by Xtext 2.16.0
 */
package xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import xtext.pycom.Board
import xtext.pycom.Server
import xtext.pycom.Communication
import xtext.pycom.Actuator
import java.util.HashMap
import xtext.pycom.ActuatorType
import java.io.BufferedInputStream
import java.net.URL
import java.nio.file.Paths
import java.io.IOException
import xtext.pycom.Sensor
import xtext.pycom.SensorType
import xtext.pycom.ConditionalAction
import xtext.pycom.Condition
import xtext.pycom.Function
import xtext.pycom.Expression
import javax.swing.JOptionPane
import java.util.List
import xtext.pycom.ExpMember
import xtext.pycom.Connection
import xtext.pycom.ModuleFunction

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PycomGenerator extends AbstractGenerator {
	
	var externalFilesMap = new HashMap<String, URL>();
	var moduleMap = new HashMap<String, String>();
	
	var HashMap<String, String> importcode
	var HashMap<String, String> codeMap
	
	var HashMap<String, String> logicmap
	var HashMap<String, String> functionmap
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		populateHashmap()
		
		for (board : resource.allContents.toIterable.filter(typeof(Board))) {
			fsa.generateFile(board.name + ".py", generatePycomFiles(board, resource, fsa))			
		}
				
		for (server : resource.allContents.toIterable.filter(typeof(Server))) {
			fsa.generateFile(server.name + ".js", generateServerFiles(server, resource))			
		} 			
	}
	
	def oppositeOP(String op) {
		if(op.equals("<")) {
			return ">"
		}
		if(op.equals(">")) {
			return "<"
		}
		if(op.equals("<=")) {
			return ">"
		}
		if(op.equals(">=")) {
			return "<"
		}
		if(op.equals("==")) {
			return "!="
		}
		if(op.equals("!=")) {
			return "=="
		}	
	}
	
	def populateHashmap() {
		externalFilesMap.put("Temperature", new URL("https://raw.githubusercontent.com/pycom/pycom-libraries/master/pysense/lib/SI7006A20.py"))
		moduleMap.put("Temperature", "SI7006A20")
	}
	
	//  «»
	// EzCopy
	// Single Line Generate Comment «/* Comment goes here */»
	// Debug Code
	// JOptionPane.showMessageDialog( null , "Message", "Title" , JOptionPane.INFORMATION_MESSAGE)
	
	def generatePycomFiles(Board b, Resource r, IFileSystemAccess2 fsa) {
		generatePycom(b, r)
		
		'''
			import pycom
			import urequests
			import machine
			import time 
			«generatePycomImports(b, r, fsa)»
		
			isRunning = True
			pycom.heartbeat(False)
			
			«generatePycomCode(b, r)»
			
			«genFunctions(b, r)»
			while(isRunning):
				«generateLogic(b, r)»
			#CODE GENERATION END
		'''
	}
	
	def generatePycomImports(Board b, Resource r, IFileSystemAccess2 fsa) { 
		val sb = new StringBuilder();
		importcode.forEach[k, v| {
			if(externalFilesMap.containsKey(k)) {
				try {
					var url = externalFilesMap.get(k)
					var filename = Paths.get(url.toURI.getPath()).getFileName().toString()
					fsa.generateFile(filename, new BufferedInputStream(url.openStream()))
				} catch (IOException e) {
					//Handle Download Exception Errors :)
					e.printStackTrace()
				}
			}
			sb.append(v + "\n")
		}]
		return sb.toString
	}
	
	def generatePycomCode(Board b, Resource r) { 
		val sb = new StringBuilder();
		sb.append("\n")
		codeMap.forEach[k, v| {
			sb.append(v + "\n")
		}]
		return sb.toString
	}
	
	def generateLogic(Board board, Resource resource) {
		val sb = new StringBuilder();
		sb.append("\n")
		logicmap.forEach[k, v| {
			sb.append(v + "\n")
		}]
		return sb.toString
	}
	
	def genFunctions(Board board, Resource resource) {
		val sb = new StringBuilder();
		sb.append("\n")
		functionmap.forEach[k, v| {
			sb.append(v + "\n")
		}]
		return sb.toString
	}
	
	def generatePycom(Board b, Resource r) {
		importcode = new HashMap<String, String>();
		codeMap = new HashMap<String, String>();
		logicmap = new HashMap<String, String>();
		functionmap = new HashMap<String, String>();
		generatePycomConnection(b, r)
		generatePycomActuator(b, r)
		generatePycomSensor(b, r)
		generateFunctions(b, r)
	}
	
	def generateFunctions(Board board, Resource resource) {
		for (server : resource.allContents.toIterable.filter(typeof(Server))) {
			for (condaction : server.exps) {
				genConditionalAction(board, resource, condaction, server)
			} 				
		} 		
	}
	
	def void genConditionalAction(Board board, Resource resource, ConditionalAction conAction, Server server) {
		genCondition(board, resource, conAction.condition, server)
		for (exp : conAction.expMembers) {
			if(exp instanceof ConditionalAction) {
				genConditionalAction(board, resource, exp, server)
			} else if(exp instanceof Function) {
				genFunction(board, resource, exp, server)
			}
		}
	}
	
	def void genCondition(Board board, Resource resource, Condition condition, Server server) {
		if(condition.nestedCondition !== null) {
			genCondition(board, resource, condition.nestedCondition, server)
		}
		if(condition.logicEx.compExp.left.outputfunction !== null) {
			if (condition.logicEx.compExp.left.outputfunction.board.equals(board)) {
				var func = condition.logicEx.compExp.left.outputfunction
				var op = condition.logicEx.compExp.op
				if(condition.logicEx.compExp.right.outputfunction === null) {
					var thresholdvalue = condition.logicEx.compExp.right.outputValue
					generateThresholdFunction(board, resource, func, thresholdvalue, op, server)
				} else if (condition.logicEx.compExp.right.outputfunction.board.equals(board)) {
					var thresholdfunc = condition.logicEx.compExp.right.outputfunction
					generateDoubleFunction(board, resource, func, thresholdfunc, op, server)
				}
			}
		}
		if(condition.logicEx.compExp.right.outputfunction !== null) {
			if (condition.logicEx.compExp.right.outputfunction.board.equals(board)) {
				var func = condition.logicEx.compExp.right.outputfunction
				var op = condition.logicEx.compExp.op
				if(condition.logicEx.compExp.left.outputfunction === null) {
					var thresholdvalue = condition.logicEx.compExp.left.outputValue
					generateThresholdFunction(board, resource, func, thresholdvalue, op, server)
				} else if (condition.logicEx.compExp.left.outputfunction.board.equals(board)) {
					var thresholdfunc = condition.logicEx.compExp.left.outputfunction
					generateDoubleFunction(board, resource, func, thresholdfunc, op, server)
				}
			}
		}
	}
	
	def getServerAddress(Connection conn) {
		var String adress
		if(!conn.host.ipAdr.isNullOrEmpty) {
			adress = conn.host.ipAdr
		} else if ((!conn.host.website.isNullOrEmpty)) {
			adress = conn.host.website
		} else {
			adress = "#Undefined Address"
		}
		adress = adress + ":" + conn.portnumber
		return adress
	}
	
	def getPostAddress(Board board, Function function) {
		if(function instanceof ModuleFunction) {
			return '''/«board.name»/«function.moduleType.typeName»/«function.moduleType.name»/«function.functionName.name»/{}'''
		} else {
			return '''/«board.name»/«function.functionName.name»/{}'''
		}
	}
	
	def generateThresholdFunction(Board board, Resource resource, Function function, int i, String op, Server server) {	
		var postaddress = getPostAddress(board, function)
		var threshold = '''
		«function.functionName.name»Threshold = «i»
		«function.functionName.name»Value = «function.functionName.name»()
		if («function.functionName.name»Value «op» «function.functionName.name»Threshold):
			sendurl = "«getServerAddress(server.conn)»«postaddress»".format(«function.functionName.name»Value)
			res = urequests.post(sendurl)   
			print("Res code: ", res.status_code)
			print("Res: ", res.reason)
		if («function.functionName.name»Value «oppositeOP(op)» «function.functionName.name»Threshold):
					sendurl = «getServerAddress(server.conn)».format(«function.functionName.name»Value)
					res = urequests.post(sendurl)   
					print("Res code: ", res.status_code)
					print("Res: ", res.reason)
		'''				
		var funk = '''
		def «function.functionName.name»():
			#Write your code here		
		'''
		logicmap.put(function.functionName.name, threshold)
		functionmap.put(function.functionName.name, funk)
	}
	
	def generateDoubleFunction(Board board, Resource resource, Function function, Function function2, String op, Server server) {
		var postaddress = getPostAddress(board, function)
		var transmitcode = '''
		«function.functionName.name»Value = «function.functionName.name»()
		«function2.functionName.name»Value = «function2.functionName.name»()
		if («function.functionName.name»Value «op» «function2.functionName.name»Value):
			sendurl = "«getServerAddress(server.conn)»«»".format(true)
			res = urequests.post(sendurl)   
			print("Res code: ", res.status_code)
			print("Res: ", res.reason)
		if («function.functionName.name»Value «oppositeOP(op)» «function2.functionName.name»Value):
			sendurl = "«getServerAddress(server.conn)»/send/{}".format(false)
			res = urequests.post(sendurl)   
			print("Res code: ", res.status_code)
			print("Res: ", res.reason)
		'''
		var funk = '''
		def «function.functionName.name»():
			#Write your code here		
		'''
		
		
		var funk2 = '''
		def «function2.functionName.name»():
			#Write your code here		
		'''
		logicmap.put(function.functionName.name, transmitcode)
		functionmap.put(function.functionName.name, funk)
		functionmap.put(function.functionName.name, funk2)
	}
	//('/boardEt/Engine/myEngine1'
	
	def genFunction(Board board, Resource resource, Function function, Server server) {
		if(function.board.equals(board)) {
			var address = getServerAddress(server.conn)
			var String sendUrl;
			var String functionname
			if(function instanceof ModuleFunction) {
				sendUrl = '''sendurl = "«address»/«board.name»/«function.moduleType.typeName»/«function.moduleType.name»/«function.functionName.name»/{}'''
			} else {
				sendUrl = '''sendurl = "«address»/«board.name»/«function.functionName.name»/{}'''
			}
			var getCode='''
			«sendUrl»
			urequests.get(sendurl) 
			    response = res.text
			    print('sending')
			    print("Res code: ", res.status_code)
			    print("Response: " + response)
			    «function.functionName.name»(response)
			'''
			logicmap.put(function.functionName.name, getCode)
			var funk = '''
			def «function.functionName.name»(serverResponse):
				#Write your code here	
			'''
			functionmap.put(function.functionName.name, funk)
		}
	}
	
	def generatePycomSensor(Board b, Resource r) {
		for (sensor : b.boardMembers.filter(typeof(Sensor))) {
			for (sensortype : sensor.sensorTypes.filter(typeof(SensorType))) {
				if (!importcode.containsKey(sensortype.typeName)) {
					importcode.put(sensortype.typeName, generateSensorImport(b, r, sensortype).toString())
					codeMap.put(sensortype.name, generateSensorCode(b, r, sensortype))
					
				}
			}
		}
	}
	
	def generateSensorCode(Board board, Resource resource, SensorType type) {
		if(type.pins !== null) {
			var power = type.pins.power.name
			var input = type.pins.input.name
			if(power == null || input == null) {
				if(moduleMap.containsKey(type.typeName)) {
					return '''«type.name» = «moduleMap.get(type.typeName)»(Pin.IN = «input», Pin.OUT = «power»)'''
				} else {
					return '''«type.name» = #Unknown Sensor'''
				}
			}	
		}
		if(moduleMap.containsKey(type.typeName)) {
			return '''«type.name» = «moduleMap.get(type.typeName)»()'''
		} else {
			return '''«type.name» = #Unknown Sensor'''
		}
	}
	
	def generateSensorImport(Board b, Resource r, SensorType sensorType) {			
		if(moduleMap.containsKey(sensorType.typeName)) {
			return '''from «moduleMap.get(sensorType.typeName)» import «moduleMap.get(sensorType.typeName)»'''
		} else {
			return '''import «sensorType.typeName»'''
		}		
	}
	
	def generatePycomActuator(Board b, Resource r) {
		for (actuator : b.boardMembers.filter(typeof(Actuator))) {
			for (actuatortype : actuator.actuatorTypes.filter(typeof(ActuatorType))) {
				if (!importcode.containsKey(actuatortype.typeName)) {
					importcode.put(actuatortype.typeName, generateActuatorImports(b, r, actuatortype).toString())
					codeMap.put(actuatortype.name, generateActuatorCode(b, r, actuatortype))
				}
			}
		}
	}
	
	def generateActuatorCode(Board board, Resource resource, ActuatorType type) {
		if(type.pins !== null) {
			var power = type.pins.power.name
			var input = type.pins.input.name
			if(power == null || input == null) {
				if(moduleMap.containsKey(type.typeName)) {
					return '''«type.name» = «moduleMap.get(type.typeName)»(Pin.IN = «input», Pin.OUT = «power»)'''
				} else {
					return '''«type.name» = #Unknown Actuator'''
				}
			}	
		}
		if(moduleMap.containsKey(type.typeName)) {
			return '''«type.name» = «moduleMap.get(type.typeName)»()'''
		} else {
			return '''«type.name» = #Unknown Actuator'''
		}
	}
	
	def generateActuatorImports(Board b, Resource r, ActuatorType actuatorType) {	
		'''import «actuatorType.typeName»'''
	}
	
	def generatePycomConnection(Board b, Resource r) {
		for (a : b.boardMembers.filter(Communication)) {
			if (!importcode.containsKey(a.type)) {
				if (a.type.equals("WiFi")) {
		    		importcode.put(a.type, generatePycomWifiImport(b, r).toString)
		    		codeMap.put(a.type, generatePycomWifiCode(b, r).toString)
			    } else {
			    	importcode.put(a.type, "#Not Supported Communication-type: " + a.type) //Default case for unsupported BlueThooth|SigFox
			    	var s = '''
			    				#***«a.type» SETUP***
			    		
			    				#Unsupported Communication, write your own code
			    		
			    				#***«a.type» SETUP END***
			    			'''
			    	codeMap.put(a.type, s)
			    }
			}
		}
	}

	def generatePycomWifiImport(Board b, Resource r) {	
		'''
			from network import WLAN
			
		'''
	}
	
	def generatePycomWifiCode(Board b, Resource r) {
		'''
			#***WIFI SETUP***
			wlan = WLAN(mode=WLAN.STA)
			nets = wlan.scan()
			ssidname = #***YOUR SSID***
			password = #***YOUR PASSWORD***
			
			if wlan.isconnected() == False:
			    for net in nets:
			        print(net.ssid)
			        if net.ssid == ssidname:
			            wlan.connect(net.ssid, auth=(net.sec, password), timeout=5000)
			            break
			
			while not wlan.isconnected():
			    machine.idle()
			print ('wlan connection succeeded!')
			print (wlan.ifconfig())
			
			#***WIFI SETUP END***
			
		'''
	}
	
	def GenerateServerHeader(Server s)
	{
		'''
		var express = require('express');
		var app = express();
		var bodyParser = require('body-parser');
		app.use(bodyParser.json());
		
		// Host: «if (s.conn.host.ipAdr === null) s.conn.host.website else s.conn.host.ipAdr »
		
		app.listen(«s.conn.portnumber», () => {
		    console.log('Started on port «s.conn.portnumber»');
		});
		
		app.get("*", function(req, res){		     
		    res.send("Default get route");
		    console.log("Default get route");
		});		
						
		'''
	}
	
	def GenerateGlobalVariables(Resource r)
	{
		var globalVariablesStringBuilder = new StringBuilder()
		
		for(b : r.allContents.toIterable.filter(typeof(Board)))
		{
			for (sensor : b.boardMembers.filter(typeof(Sensor))) 
			{
				for (sensortype : sensor.sensorTypes.filter(typeof(SensorType))) 
				{
					globalVariablesStringBuilder.append("var " + sensortype.typeName + "_" + sensortype.name + "_value" + " = undefined;\n")														
				}
			}
			
			globalVariablesStringBuilder.append("\n");
			
			for (actuator : b.boardMembers.filter(typeof(Actuator))) 
			{
				for (actuatortype : actuator.actuatorTypes.filter(typeof(ActuatorType))) 
				{	
					globalVariablesStringBuilder.append("var " + actuatortype.typeName + "_" + actuatortype.name + "_turnOn" + " = undefined;\n")																								
				}
			}
			
			globalVariablesStringBuilder.append("\n");
		}		
		
		globalVariablesStringBuilder.append("\n");
		return globalVariablesStringBuilder.toString;				
	}
	
	def generateServerFiles(Server s, Resource r) 
	{
		var conditionalAction = s.exps.get(0);		
		var type = conditionalAction.type;
		var stringBuilder = new StringBuilder;
		
		stringBuilder.append(GenerateServerHeader(s))	
		stringBuilder.append(GenerateGlobalVariables(r))	
		GeneratePostRoutes(stringBuilder, conditionalAction, r, type, s)
		GenerateIfFunctions(stringBuilder, conditionalAction, r, type, s)
						
		return stringBuilder.toString;
	}		
	
	def GeneratePostRoutes(StringBuilder stringBuilder, ConditionalAction conditionalAction, Resource r, String type, Server s)
	{						
		for (b : r.allContents.toIterable.filter(typeof(Board)))
		{
			for (sensor : b.boardMembers.filter(typeof(Sensor))) 
			{
				for (sensortype : sensor.sensorTypes.filter(typeof(SensorType))) 
				{
					var variableName = sensortype.typeName + "_" + sensortype.name + "_" + "value";
					
					stringBuilder.append(						
						'''							
						app.post('/«b.name»/«sensortype.typeName»/«sensortype.name»/:value', function(req, res)
							{    					    
							    «variableName» = req.params.value; 
							    ServerFunction0();
							    								    
						    	res.send("Message received: " + «variableName»);
						    	console.log("Message received: " + «variableName»)    								    
							});	
																
						'''				
						)														
				}
			}			
			
			for (actuator : b.boardMembers.filter(typeof(Actuator))) 
			{
				for (actuatortype : actuator.actuatorTypes.filter(typeof(ActuatorType))) 
				{	
					var variableName = actuatortype.typeName + "_" + actuatortype.name + "_" + "turnOn";
											
					stringBuilder.append(						
						'''							
						app.get('/«b.name»/«actuatortype.typeName»/«actuatortype.name»', function(req, res)
							{    					    
							    res.send(«variableName»);
						    	console.log("Return «variableName»: " + «variableName»)    								    
							});	
																
						'''				
						)																									
				}
			}
			
			stringBuilder.append("\n\n");
		}									
	}
	
	def GenerateIfFunctions(StringBuilder stringBuilder, ConditionalAction conditionalAction, Resource r, String type, Server s)
	{
		var conditionalStringBuilder = new StringBuilder();
		var content = GetConditionalStatementContent(conditionalStringBuilder, conditionalAction.condition);		
		var scopeContent = GetConditionalScopeContent(conditionalAction.expMembers);		
		var counter = 0;
		
		for(b : s.exps.filter(typeof(ConditionalAction)))
		{
			stringBuilder.append(						
			'''										
				function ServerFunction«counter»()
				{    					    			    			    
				    «type»(«content»)
				    {  
				    	«scopeContent»				    	
				    }
				}	
							
			'''				
			)	
			
			counter++;	
		}		
	}
	
	def GetConditionalScopeContent(List<ExpMember> content)
	{
		var scopeContentBuilder = new StringBuilder();		
		
		for (exp : content) 
		{
			if(exp instanceof ConditionalAction) 
			{
				var tempBuilder = new StringBuilder();
				var text = GetConditionalStatementContent(tempBuilder, exp.condition)
				scopeContentBuilder.append(exp.type + "(" + text + ")\n")				
				
				if(exp.expMembers.size > 0)
				{
					scopeContentBuilder.append("{\n" + GetConditionalScopeContent(exp.expMembers) + "}\n\n")
				}
			} 
			else if(exp instanceof Function) 
			{
				var output = ""
				if(exp instanceof ModuleFunction) 
				{
					output = exp.moduleType.typeName + "_" + exp.moduleType.name + "_" + "turnOn"
				}															
				scopeContentBuilder.append("\t" + output + " = true" + "\n")
			}
		}
		
		return scopeContentBuilder.toString;
	}
	
	def GetConditionalStatementContent(StringBuilder stringBuilder, Condition condition)
	{
		var left = "";
		var operator = condition.logicEx.compExp.op;
		var right = "";											
		
		if(condition.logicEx.compExp.left.outputfunction != null)
		{
			left = "value";
		}	
		else
		{
			left = String.valueOf(condition.logicEx.compExp.left.outputValue);
		}
		
		if(condition.logicEx.compExp.right.outputfunction != null)
		{
			right = "value";
		}
		else
		{
			right = String.valueOf(condition.logicEx.compExp.right.outputValue);
		}
		
		stringBuilder.append(left + " " + operator + " " + right);
		
		if(condition.operator != null)
		{
			stringBuilder.append(" " + condition.operator + " ");
		}	
		
		if(condition.nestedCondition != null)
		{
			GetConditionalStatementContent(stringBuilder, condition.nestedCondition)
		}	
		
		return stringBuilder.toString;
	}		
}