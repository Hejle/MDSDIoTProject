grammar xtext.Pycom with org.eclipse.xtext.common.Terminals
generate pycom "http://www.Pycom.xtext"

System:
	hardware+=Hardware* boards+=Board* servers+=Server*;

Hardware:
	'Hardware' name=ID '{' boardMembers+=BoardMember*  function=Function? '}'
;

Function:
	{Function} 'Function' '{' functiondef+=FunctionDefinitions* '}'
;

FunctionDefinitions:
	name=ID '(' parameters+=ParameterType? (',' parameters+=ParameterType)* ')' 'as' externalFunction=ExternalFunction
;

ExternalFunction:
	filename=Filename '.' name=ID '(' parameters+=ParameterType? (',' parameters+=ParameterType)* ')'
;
	
Filename: 
	name=ID
;

ParameterType:
	value=INT | name=ID
;

FunctionCall:
	board=[Board] '.' function=[FunctionDefinitions] '(' parameters+=ParameterType? (',' parameters+=ParameterType)* ')' | function=[FunctionDefinitions] '(' parameters+=ParameterType? (',' parameters+=ParameterType)* ')'
;
	
Server:
	'Server' name=ID '('conn=Connection')' '{' exps+=ConditionalAction* '}' 
;

Connection:
	host=Host ',' portnumber=Port 
;

Host:
	ipAdr= Ipaddress | website=STRING
;

Ipaddress:
	INT'.'INT'.'INT'.'INT
;

Port:
	INT
;

Board:
	'Board' name=ID 'implements' hardware=[Hardware] '{' exps+=ExpMember* '}';

BoardMember:
	Sensor | Actuator;

ConditionalAction:
	type='if' '(' condition=Condition ')' '{' ExpMembers+=ExpMember* '}'
;

ExpMember:
	FunctionCall | ConditionalAction;

Sensor:
	'Sensor' sensorTypes+=ModuleType (',' sensorTypes+=ModuleType)*;

Actuator:
	'Actuator' actuatorTypes+=ModuleType (',' actuatorTypes+=ModuleType)*;
	
ModuleType:
	typeName=ModuleName ':' name=ID ('(' pins=Pin ')')? ( 'as' filename=Filename)?
;

Pin:
	power=PinName ',' input=PinName;
	
PinName:
	name=ID
;

ModuleName:
	name=ID
;

Condition:
	logicEx=LogicExp | logicEx=LogicExp operator='&&' nestedCondition=Condition | logicEx=LogicExp operator='||' nestedCondition=Condition;

LogicExp:
	boolVal=Boolean | compExp=ComparisonExp;
	
Boolean:
	value='true' | value='false';
	
ComparisonExp: 
	left=Expression op=Operator right=Expression 	
;

Expression:
	outputValue=INT | outputfunction=FunctionCall
;

Operator:
	'<' | '<=' | '==' | '>=' | '>' | '!='
;
