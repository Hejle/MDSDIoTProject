/*
 * generated by Xtext 2.17.0
 */
grammar InternalPycom;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.services.PycomGrammarAccess;

}
@parser::members {
	private PycomGrammarAccess grammarAccess;

	public void setGrammarAccess(PycomGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSystem
entryRuleSystem
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSystemAccess().getGroup()); }
		(rule__System__Group__0)
		{ after(grammarAccess.getSystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleServer
entryRuleServer
:
{ before(grammarAccess.getServerRule()); }
	 ruleServer
{ after(grammarAccess.getServerRule()); } 
	 EOF 
;

// Rule Server
ruleServer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getServerAccess().getGroup()); }
		(rule__Server__Group__0)
		{ after(grammarAccess.getServerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnection
entryRuleConnection
:
{ before(grammarAccess.getConnectionRule()); }
	 ruleConnection
{ after(grammarAccess.getConnectionRule()); } 
	 EOF 
;

// Rule Connection
ruleConnection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectionAccess().getGroup()); }
		(rule__Connection__Group__0)
		{ after(grammarAccess.getConnectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIpaddress
entryRuleIpaddress
:
{ before(grammarAccess.getIpaddressRule()); }
	 ruleIpaddress
{ after(grammarAccess.getIpaddressRule()); } 
	 EOF 
;

// Rule Ipaddress
ruleIpaddress 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIpaddressAccess().getGroup()); }
		(rule__Ipaddress__Group__0)
		{ after(grammarAccess.getIpaddressAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePort
entryRulePort
:
{ before(grammarAccess.getPortRule()); }
	 rulePort
{ after(grammarAccess.getPortRule()); } 
	 EOF 
;

// Rule Port
rulePort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPortAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getPortAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoard
entryRuleBoard
:
{ before(grammarAccess.getBoardRule()); }
	 ruleBoard
{ after(grammarAccess.getBoardRule()); } 
	 EOF 
;

// Rule Board
ruleBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardAccess().getGroup()); }
		(rule__Board__Group__0)
		{ after(grammarAccess.getBoardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoardMember
entryRuleBoardMember
:
{ before(grammarAccess.getBoardMemberRule()); }
	 ruleBoardMember
{ after(grammarAccess.getBoardMemberRule()); } 
	 EOF 
;

// Rule BoardMember
ruleBoardMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardMemberAccess().getAlternatives()); }
		(rule__BoardMember__Alternatives)
		{ after(grammarAccess.getBoardMemberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalAction
entryRuleConditionalAction
:
{ before(grammarAccess.getConditionalActionRule()); }
	 ruleConditionalAction
{ after(grammarAccess.getConditionalActionRule()); } 
	 EOF 
;

// Rule ConditionalAction
ruleConditionalAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalActionAccess().getAlternatives()); }
		(rule__ConditionalAction__Alternatives)
		{ after(grammarAccess.getConditionalActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpMember
entryRuleExpMember
:
{ before(grammarAccess.getExpMemberRule()); }
	 ruleExpMember
{ after(grammarAccess.getExpMemberRule()); } 
	 EOF 
;

// Rule ExpMember
ruleExpMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpMemberAccess().getAlternatives()); }
		(rule__ExpMember__Alternatives)
		{ after(grammarAccess.getExpMemberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuator
entryRuleActuator
:
{ before(grammarAccess.getActuatorRule()); }
	 ruleActuator
{ after(grammarAccess.getActuatorRule()); } 
	 EOF 
;

// Rule Actuator
ruleActuator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorAccess().getGroup()); }
		(rule__Actuator__Group__0)
		{ after(grammarAccess.getActuatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommunication
entryRuleCommunication
:
{ before(grammarAccess.getCommunicationRule()); }
	 ruleCommunication
{ after(grammarAccess.getCommunicationRule()); } 
	 EOF 
;

// Rule Communication
ruleCommunication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommunicationAccess().getGroup()); }
		(rule__Communication__Group__0)
		{ after(grammarAccess.getCommunicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuatorType
entryRuleActuatorType
:
{ before(grammarAccess.getActuatorTypeRule()); }
	 ruleActuatorType
{ after(grammarAccess.getActuatorTypeRule()); } 
	 EOF 
;

// Rule ActuatorType
ruleActuatorType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorTypeAccess().getGroup()); }
		(rule__ActuatorType__Group__0)
		{ after(grammarAccess.getActuatorTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorType
entryRuleSensorType
:
{ before(grammarAccess.getSensorTypeRule()); }
	 ruleSensorType
{ after(grammarAccess.getSensorTypeRule()); } 
	 EOF 
;

// Rule SensorType
ruleSensorType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorTypeAccess().getGroup()); }
		(rule__SensorType__Group__0)
		{ after(grammarAccess.getSensorTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorName
entryRuleSensorName
:
{ before(grammarAccess.getSensorNameRule()); }
	 ruleSensorName
{ after(grammarAccess.getSensorNameRule()); } 
	 EOF 
;

// Rule SensorName
ruleSensorName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorNameAccess().getAlternatives()); }
		(rule__SensorName__Alternatives)
		{ after(grammarAccess.getSensorNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePin
entryRulePin
:
{ before(grammarAccess.getPinRule()); }
	 rulePin
{ after(grammarAccess.getPinRule()); } 
	 EOF 
;

// Rule Pin
rulePin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPinAccess().getGroup()); }
		(rule__Pin__Group__0)
		{ after(grammarAccess.getPinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuatorName
entryRuleActuatorName
:
{ before(grammarAccess.getActuatorNameRule()); }
	 ruleActuatorName
{ after(grammarAccess.getActuatorNameRule()); } 
	 EOF 
;

// Rule ActuatorName
ruleActuatorName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorNameAccess().getAlternatives()); }
		(rule__ActuatorName__Alternatives)
		{ after(grammarAccess.getActuatorNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicExp
entryRuleLogicExp
:
{ before(grammarAccess.getLogicExpRule()); }
	 ruleLogicExp
{ after(grammarAccess.getLogicExpRule()); } 
	 EOF 
;

// Rule LogicExp
ruleLogicExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicExpAccess().getAlternatives()); }
		(rule__LogicExp__Alternatives)
		{ after(grammarAccess.getLogicExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExp
entryRuleComparisonExp
:
{ before(grammarAccess.getComparisonExpRule()); }
	 ruleComparisonExp
{ after(grammarAccess.getComparisonExpRule()); } 
	 EOF 
;

// Rule ComparisonExp
ruleComparisonExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpAccess().getGroup()); }
		(rule__ComparisonExp__Group__0)
		{ after(grammarAccess.getComparisonExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperator
entryRuleOperator
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
		(rule__Operator__Alternatives)
		{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getAlternatives()); }
		(rule__Function__Alternatives)
		{ after(grammarAccess.getFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuatorFunction
entryRuleActuatorFunction
:
{ before(grammarAccess.getActuatorFunctionRule()); }
	 ruleActuatorFunction
{ after(grammarAccess.getActuatorFunctionRule()); } 
	 EOF 
;

// Rule ActuatorFunction
ruleActuatorFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorFunctionAccess().getAlternatives()); }
		(rule__ActuatorFunction__Alternatives)
		{ after(grammarAccess.getActuatorFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorFunction
entryRuleSensorFunction
:
{ before(grammarAccess.getSensorFunctionRule()); }
	 ruleSensorFunction
{ after(grammarAccess.getSensorFunctionRule()); } 
	 EOF 
;

// Rule SensorFunction
ruleSensorFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorFunctionAccess().getAlternatives()); }
		(rule__SensorFunction__Alternatives)
		{ after(grammarAccess.getSensorFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorFunctionName
entryRuleSensorFunctionName
:
{ before(grammarAccess.getSensorFunctionNameRule()); }
	 ruleSensorFunctionName
{ after(grammarAccess.getSensorFunctionNameRule()); } 
	 EOF 
;

// Rule SensorFunctionName
ruleSensorFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorFunctionNameAccess().getSensorFunctionNameKeyword()); }
		'SensorFunctionName'
		{ after(grammarAccess.getSensorFunctionNameAccess().getSensorFunctionNameKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuatorFunctionName
entryRuleActuatorFunctionName
:
{ before(grammarAccess.getActuatorFunctionNameRule()); }
	 ruleActuatorFunctionName
{ after(grammarAccess.getActuatorFunctionNameRule()); } 
	 EOF 
;

// Rule ActuatorFunctionName
ruleActuatorFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorFunctionNameAccess().getActuatorFunctionNameKeyword()); }
		'ActuatorFunctionName'
		{ after(grammarAccess.getActuatorFunctionNameAccess().getActuatorFunctionNameKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoardFunctionName
entryRuleBoardFunctionName
:
{ before(grammarAccess.getBoardFunctionNameRule()); }
	 ruleBoardFunctionName
{ after(grammarAccess.getBoardFunctionNameRule()); } 
	 EOF 
;

// Rule BoardFunctionName
ruleBoardFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardFunctionNameAccess().getBoardFunctionNameKeyword()); }
		'BoardFunctionName'
		{ after(grammarAccess.getBoardFunctionNameAccess().getBoardFunctionNameKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getIpAdrAssignment_0_0()); }
		(rule__Connection__IpAdrAssignment_0_0)
		{ after(grammarAccess.getConnectionAccess().getIpAdrAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConnectionAccess().getWebsiteAssignment_0_1()); }
		(rule__Connection__WebsiteAssignment_0_1)
		{ after(grammarAccess.getConnectionAccess().getWebsiteAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardMember__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardMemberAccess().getSensorParserRuleCall_0()); }
		ruleSensor
		{ after(grammarAccess.getBoardMemberAccess().getSensorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoardMemberAccess().getActuatorParserRuleCall_1()); }
		ruleActuator
		{ after(grammarAccess.getBoardMemberAccess().getActuatorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoardMemberAccess().getCommunicationParserRuleCall_2()); }
		ruleCommunication
		{ after(grammarAccess.getBoardMemberAccess().getCommunicationParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalActionAccess().getGroup_0()); }
		(rule__ConditionalAction__Group_0__0)
		{ after(grammarAccess.getConditionalActionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalActionAccess().getGroup_1()); }
		(rule__ConditionalAction__Group_1__0)
		{ after(grammarAccess.getConditionalActionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMember__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpMemberAccess().getFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getExpMemberAccess().getFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpMemberAccess().getConditionalActionParserRuleCall_1()); }
		ruleConditionalAction
		{ after(grammarAccess.getExpMemberAccess().getConditionalActionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Communication__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommunicationAccess().getWiFiKeyword_2_0()); }
		'WiFi'
		{ after(grammarAccess.getCommunicationAccess().getWiFiKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommunicationAccess().getBluetoothKeyword_2_1()); }
		'Bluetooth'
		{ after(grammarAccess.getCommunicationAccess().getBluetoothKeyword_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommunicationAccess().getSigFoxKeyword_2_2()); }
		'SigFox'
		{ after(grammarAccess.getCommunicationAccess().getSigFoxKeyword_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorNameAccess().getLightKeyword_0()); }
		'Light'
		{ after(grammarAccess.getSensorNameAccess().getLightKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorNameAccess().getTemperatureKeyword_1()); }
		'Temperature'
		{ after(grammarAccess.getSensorNameAccess().getTemperatureKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorNameAccess().getBarometerKeyword_2()); }
		'Barometer'
		{ after(grammarAccess.getSensorNameAccess().getBarometerKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSensorNameAccess().getHumidityKeyword_3()); }
		'Humidity'
		{ after(grammarAccess.getSensorNameAccess().getHumidityKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getSensorNameAccess().getAccelerometerKeyword_4()); }
		'Accelerometer'
		{ after(grammarAccess.getSensorNameAccess().getAccelerometerKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorNameAccess().getLEDKeyword_0()); }
		'LED'
		{ after(grammarAccess.getActuatorNameAccess().getLEDKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getActuatorNameAccess().getEngineKeyword_1()); }
		'Engine'
		{ after(grammarAccess.getActuatorNameAccess().getEngineKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_0()); }
		ruleLogicExp
		{ after(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getGroup_1()); }
		(rule__Condition__Group_1__0)
		{ after(grammarAccess.getConditionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getGroup_2()); }
		(rule__Condition__Group_2__0)
		{ after(grammarAccess.getConditionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpAccess().getBooleanParserRuleCall_0()); }
		ruleBoolean
		{ after(grammarAccess.getLogicExpAccess().getBooleanParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicExpAccess().getComparisonExpParserRuleCall_1()); }
		ruleComparisonExp
		{ after(grammarAccess.getLogicExpAccess().getComparisonExpParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValueAssignment_0()); }
		(rule__Boolean__ValueAssignment_0)
		{ after(grammarAccess.getBooleanAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
		(rule__Boolean__ValueAssignment_1)
		{ after(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignKeyword_0()); }
		'<'
		{ after(grammarAccess.getOperatorAccess().getLessThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }
		'<='
		{ after(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_2()); }
		'=='
		{ after(grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
		'>='
		{ after(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4()); }
		'>'
		{ after(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
		'!='
		{ after(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getExpressionAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getFunctionParserRuleCall_1()); }
		ruleFunction
		{ after(grammarAccess.getExpressionAccess().getFunctionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getActuatorFunctionParserRuleCall_0()); }
		ruleActuatorFunction
		{ after(grammarAccess.getFunctionAccess().getActuatorFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getSensorFunctionParserRuleCall_1()); }
		ruleSensorFunction
		{ after(grammarAccess.getFunctionAccess().getSensorFunctionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getGroup_2()); }
		(rule__Function__Group_2__0)
		{ after(grammarAccess.getFunctionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorFunctionAccess().getGroup_0()); }
		(rule__ActuatorFunction__Group_0__0)
		{ after(grammarAccess.getActuatorFunctionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getActuatorFunctionAccess().getGroup_1()); }
		(rule__ActuatorFunction__Group_1__0)
		{ after(grammarAccess.getActuatorFunctionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorFunctionAccess().getGroup_0()); }
		(rule__SensorFunction__Group_0__0)
		{ after(grammarAccess.getSensorFunctionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorFunctionAccess().getGroup_1()); }
		(rule__SensorFunction__Group_1__0)
		{ after(grammarAccess.getSensorFunctionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getBoardsAssignment_0()); }
	(rule__System__BoardsAssignment_0)*
	{ after(grammarAccess.getSystemAccess().getBoardsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getServersAssignment_1()); }
	(rule__System__ServersAssignment_1)*
	{ after(grammarAccess.getSystemAccess().getServersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Server__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__0__Impl
	rule__Server__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getServerKeyword_0()); }
	'Server'
	{ after(grammarAccess.getServerAccess().getServerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__1__Impl
	rule__Server__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getNameAssignment_1()); }
	(rule__Server__NameAssignment_1)
	{ after(grammarAccess.getServerAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__2__Impl
	rule__Server__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getServerAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__3__Impl
	rule__Server__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getConnAssignment_3()); }
	(rule__Server__ConnAssignment_3)
	{ after(grammarAccess.getServerAccess().getConnAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__4__Impl
	rule__Server__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getServerAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__5__Impl
	rule__Server__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getServerAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__6__Impl
	rule__Server__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getExpsAssignment_6()); }
	(rule__Server__ExpsAssignment_6)*
	{ after(grammarAccess.getServerAccess().getExpsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Server__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getServerAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getServerAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Connection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__0__Impl
	rule__Connection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getAlternatives_0()); }
	(rule__Connection__Alternatives_0)
	{ after(grammarAccess.getConnectionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__1__Impl
	rule__Connection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getCommaKeyword_1()); }
	','
	{ after(grammarAccess.getConnectionAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Connection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectionAccess().getPortnumberAssignment_2()); }
	(rule__Connection__PortnumberAssignment_2)
	{ after(grammarAccess.getConnectionAccess().getPortnumberAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ipaddress__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ipaddress__Group__0__Impl
	rule__Ipaddress__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ipaddress__Group__1__Impl
	rule__Ipaddress__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIpaddressAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getIpaddressAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ipaddress__Group__2__Impl
	rule__Ipaddress__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ipaddress__Group__3__Impl
	rule__Ipaddress__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIpaddressAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getIpaddressAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ipaddress__Group__4__Impl
	rule__Ipaddress__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_4()); }
	RULE_INT
	{ after(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ipaddress__Group__5__Impl
	rule__Ipaddress__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIpaddressAccess().getFullStopKeyword_5()); }
	'.'
	{ after(grammarAccess.getIpaddressAccess().getFullStopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ipaddress__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ipaddress__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_6()); }
	RULE_INT
	{ after(grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Board__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__0__Impl
	rule__Board__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getBoardKeyword_0()); }
	'Board'
	{ after(grammarAccess.getBoardAccess().getBoardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__1__Impl
	rule__Board__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getNameAssignment_1()); }
	(rule__Board__NameAssignment_1)
	{ after(grammarAccess.getBoardAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__2__Impl
	rule__Board__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getBoardAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__3__Impl
	rule__Board__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getBoardMembersAssignment_3()); }
	(rule__Board__BoardMembersAssignment_3)*
	{ after(grammarAccess.getBoardAccess().getBoardMembersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getBoardAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalAction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_0__0__Impl
	rule__ConditionalAction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getIfKeyword_0_0()); }
	'if'
	{ after(grammarAccess.getConditionalActionAccess().getIfKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_0__1__Impl
	rule__ConditionalAction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_0_1()); }
	'('
	{ after(grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_0__2__Impl
	rule__ConditionalAction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getConditionParserRuleCall_0_2()); }
	ruleCondition
	{ after(grammarAccess.getConditionalActionAccess().getConditionParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_0__3__Impl
	rule__ConditionalAction__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getRightParenthesisKeyword_0_3()); }
	')'
	{ after(grammarAccess.getConditionalActionAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_0__4__Impl
	rule__ConditionalAction__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getLeftCurlyBracketKeyword_0_4()); }
	'{'
	{ after(grammarAccess.getConditionalActionAccess().getLeftCurlyBracketKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_0__5__Impl
	rule__ConditionalAction__Group_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getExpMembersAssignment_0_5()); }
	(rule__ConditionalAction__ExpMembersAssignment_0_5)*
	{ after(grammarAccess.getConditionalActionAccess().getExpMembersAssignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_0__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_0__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getRightCurlyBracketKeyword_0_6()); }
	'}'
	{ after(grammarAccess.getConditionalActionAccess().getRightCurlyBracketKeyword_0_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalAction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_1__0__Impl
	rule__ConditionalAction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getWhileKeyword_1_0()); }
	'while'
	{ after(grammarAccess.getConditionalActionAccess().getWhileKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_1__1__Impl
	rule__ConditionalAction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_1__2__Impl
	rule__ConditionalAction__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getConditionParserRuleCall_1_2()); }
	ruleCondition
	{ after(grammarAccess.getConditionalActionAccess().getConditionParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_1__3__Impl
	rule__ConditionalAction__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getConditionalActionAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_1__4__Impl
	rule__ConditionalAction__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getLeftCurlyBracketKeyword_1_4()); }
	'{'
	{ after(grammarAccess.getConditionalActionAccess().getLeftCurlyBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_1__5__Impl
	rule__ConditionalAction__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getExpMembersAssignment_1_5()); }
	(rule__ConditionalAction__ExpMembersAssignment_1_5)*
	{ after(grammarAccess.getConditionalActionAccess().getExpMembersAssignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalAction__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalActionAccess().getRightCurlyBracketKeyword_1_6()); }
	'}'
	{ after(grammarAccess.getConditionalActionAccess().getRightCurlyBracketKeyword_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
	'Sensor'
	{ after(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorTypesAssignment_1()); }
	(rule__Sensor__SensorTypesAssignment_1)
	{ after(grammarAccess.getSensorAccess().getSensorTypesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_2()); }
	(rule__Sensor__Group_2__0)*
	{ after(grammarAccess.getSensorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_2__0__Impl
	rule__Sensor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSensorAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorTypesAssignment_2_1()); }
	(rule__Sensor__SensorTypesAssignment_2_1)
	{ after(grammarAccess.getSensorAccess().getSensorTypesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actuator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__0__Impl
	rule__Actuator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getActuatorKeyword_0()); }
	'Actuator'
	{ after(grammarAccess.getActuatorAccess().getActuatorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__1__Impl
	rule__Actuator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getActuatorTypesAssignment_1()); }
	(rule__Actuator__ActuatorTypesAssignment_1)
	{ after(grammarAccess.getActuatorAccess().getActuatorTypesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getGroup_2()); }
	(rule__Actuator__Group_2__0)*
	{ after(grammarAccess.getActuatorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actuator__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group_2__0__Impl
	rule__Actuator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getActuatorAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getActuatorTypesAssignment_2_1()); }
	(rule__Actuator__ActuatorTypesAssignment_2_1)
	{ after(grammarAccess.getActuatorAccess().getActuatorTypesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Communication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Communication__Group__0__Impl
	rule__Communication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Communication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommunicationAccess().getCommunicationKeyword_0()); }
	'Communication'
	{ after(grammarAccess.getCommunicationAccess().getCommunicationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Communication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Communication__Group__1__Impl
	rule__Communication__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Communication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommunicationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCommunicationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Communication__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Communication__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Communication__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommunicationAccess().getAlternatives_2()); }
	(rule__Communication__Alternatives_2)
	{ after(grammarAccess.getCommunicationAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActuatorType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorType__Group__0__Impl
	rule__ActuatorType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorTypeAccess().getTypeNameAssignment_0()); }
	(rule__ActuatorType__TypeNameAssignment_0)
	{ after(grammarAccess.getActuatorTypeAccess().getTypeNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorType__Group__1__Impl
	rule__ActuatorType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorTypeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getActuatorTypeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorType__Group__2__Impl
	rule__ActuatorType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorTypeAccess().getNameAssignment_2()); }
	(rule__ActuatorType__NameAssignment_2)
	{ after(grammarAccess.getActuatorTypeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorTypeAccess().getGroup_3()); }
	(rule__ActuatorType__Group_3__0)?
	{ after(grammarAccess.getActuatorTypeAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActuatorType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorType__Group_3__0__Impl
	rule__ActuatorType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorTypeAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getActuatorTypeAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorType__Group_3__1__Impl
	rule__ActuatorType__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorTypeAccess().getPinsAssignment_3_1()); }
	(rule__ActuatorType__PinsAssignment_3_1)
	{ after(grammarAccess.getActuatorTypeAccess().getPinsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorType__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorTypeAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getActuatorTypeAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorType__Group__0__Impl
	rule__SensorType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorTypeAccess().getTypeNameAssignment_0()); }
	(rule__SensorType__TypeNameAssignment_0)
	{ after(grammarAccess.getSensorTypeAccess().getTypeNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorType__Group__1__Impl
	rule__SensorType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorTypeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getSensorTypeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorType__Group__2__Impl
	rule__SensorType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorTypeAccess().getNameAssignment_2()); }
	(rule__SensorType__NameAssignment_2)
	{ after(grammarAccess.getSensorTypeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorTypeAccess().getGroup_3()); }
	(rule__SensorType__Group_3__0)?
	{ after(grammarAccess.getSensorTypeAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorType__Group_3__0__Impl
	rule__SensorType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorTypeAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getSensorTypeAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorType__Group_3__1__Impl
	rule__SensorType__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorTypeAccess().getPinsAssignment_3_1()); }
	(rule__SensorType__PinsAssignment_3_1)
	{ after(grammarAccess.getSensorTypeAccess().getPinsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorType__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorTypeAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getSensorTypeAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin__Group__0__Impl
	rule__Pin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPinAccess().getPowerAssignment_0()); }
	(rule__Pin__PowerAssignment_0)
	{ after(grammarAccess.getPinAccess().getPowerAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin__Group__1__Impl
	rule__Pin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPinAccess().getCommaKeyword_1()); }
	','
	{ after(grammarAccess.getPinAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPinAccess().getInputAssignment_2()); }
	(rule__Pin__InputAssignment_2)
	{ after(grammarAccess.getPinAccess().getInputAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__0__Impl
	rule__Condition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_1_0()); }
	ruleLogicExp
	{ after(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__1__Impl
	rule__Condition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getConditionAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionAssignment_1_2()); }
	(rule__Condition__ConditionAssignment_1_2)
	{ after(grammarAccess.getConditionAccess().getConditionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_2__0__Impl
	rule__Condition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_2_0()); }
	ruleLogicExp
	{ after(grammarAccess.getConditionAccess().getLogicExpParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_2__1__Impl
	rule__Condition__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getVerticalLineVerticalLineKeyword_2_1()); }
	'||'
	{ after(grammarAccess.getConditionAccess().getVerticalLineVerticalLineKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionAssignment_2_2()); }
	(rule__Condition__ConditionAssignment_2_2)
	{ after(grammarAccess.getConditionAccess().getConditionAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExp__Group__0__Impl
	rule__ComparisonExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpAccess().getLeftAssignment_0()); }
	(rule__ComparisonExp__LeftAssignment_0)
	{ after(grammarAccess.getComparisonExpAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExp__Group__1__Impl
	rule__ComparisonExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpAccess().getOpAssignment_1()); }
	(rule__ComparisonExp__OpAssignment_1)
	{ after(grammarAccess.getComparisonExpAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpAccess().getRigthAssignment_2()); }
	(rule__ComparisonExp__RigthAssignment_2)
	{ after(grammarAccess.getComparisonExpAccess().getRigthAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_2__0__Impl
	rule__Function__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBoardAssignment_2_0()); }
	(rule__Function__BoardAssignment_2_0)
	{ after(grammarAccess.getFunctionAccess().getBoardAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_2__1__Impl
	rule__Function__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFullStopKeyword_2_1()); }
	'.'
	{ after(grammarAccess.getFunctionAccess().getFullStopKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBoardFunctionNameParserRuleCall_2_2()); }
	ruleBoardFunctionName
	{ after(grammarAccess.getFunctionAccess().getBoardFunctionNameParserRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActuatorFunction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_0__0__Impl
	rule__ActuatorFunction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getBoardAssignment_0_0()); }
	(rule__ActuatorFunction__BoardAssignment_0_0)
	{ after(grammarAccess.getActuatorFunctionAccess().getBoardAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_0__1__Impl
	rule__ActuatorFunction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_0__2__Impl
	rule__ActuatorFunction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getActuatorTypeAssignment_0_2()); }
	(rule__ActuatorFunction__ActuatorTypeAssignment_0_2)
	{ after(grammarAccess.getActuatorFunctionAccess().getActuatorTypeAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_0__3__Impl
	rule__ActuatorFunction__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_0_3()); }
	'.'
	{ after(grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getActuatorFunctionNameParserRuleCall_0_4()); }
	ruleActuatorFunctionName
	{ after(grammarAccess.getActuatorFunctionAccess().getActuatorFunctionNameParserRuleCall_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActuatorFunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_1__0__Impl
	rule__ActuatorFunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getActuatorTypeAssignment_1_0()); }
	(rule__ActuatorFunction__ActuatorTypeAssignment_1_0)
	{ after(grammarAccess.getActuatorFunctionAccess().getActuatorTypeAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_1__1__Impl
	rule__ActuatorFunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getActuatorFunctionAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActuatorFunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorFunctionAccess().getActuatorFunctionNameParserRuleCall_1_2()); }
	ruleActuatorFunctionName
	{ after(grammarAccess.getActuatorFunctionAccess().getActuatorFunctionNameParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorFunction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_0__0__Impl
	rule__SensorFunction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getBoardAssignment_0_0()); }
	(rule__SensorFunction__BoardAssignment_0_0)
	{ after(grammarAccess.getSensorFunctionAccess().getBoardAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_0__1__Impl
	rule__SensorFunction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getSensorFunctionAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_0__2__Impl
	rule__SensorFunction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getSensorTypeAssignment_0_2()); }
	(rule__SensorFunction__SensorTypeAssignment_0_2)
	{ after(grammarAccess.getSensorFunctionAccess().getSensorTypeAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_0__3__Impl
	rule__SensorFunction__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getFullStopKeyword_0_3()); }
	'.'
	{ after(grammarAccess.getSensorFunctionAccess().getFullStopKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getSensorFunctionNameParserRuleCall_0_4()); }
	ruleSensorFunctionName
	{ after(grammarAccess.getSensorFunctionAccess().getSensorFunctionNameParserRuleCall_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorFunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_1__0__Impl
	rule__SensorFunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getSensorTypeAssignment_1_0()); }
	(rule__SensorFunction__SensorTypeAssignment_1_0)
	{ after(grammarAccess.getSensorFunctionAccess().getSensorTypeAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_1__1__Impl
	rule__SensorFunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getSensorFunctionAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorFunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorFunctionAccess().getSensorFunctionNameParserRuleCall_1_2()); }
	ruleSensorFunctionName
	{ after(grammarAccess.getSensorFunctionAccess().getSensorFunctionNameParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__System__BoardsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getBoardsBoardParserRuleCall_0_0()); }
		ruleBoard
		{ after(grammarAccess.getSystemAccess().getBoardsBoardParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__ServersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getServersServerParserRuleCall_1_0()); }
		ruleServer
		{ after(grammarAccess.getSystemAccess().getServersServerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getServerAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getServerAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__ConnAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getServerAccess().getConnConnectionParserRuleCall_3_0()); }
		ruleConnection
		{ after(grammarAccess.getServerAccess().getConnConnectionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Server__ExpsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getServerAccess().getExpsConditionalActionParserRuleCall_6_0()); }
		ruleConditionalAction
		{ after(grammarAccess.getServerAccess().getExpsConditionalActionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__IpAdrAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getIpAdrIpaddressParserRuleCall_0_0_0()); }
		ruleIpaddress
		{ after(grammarAccess.getConnectionAccess().getIpAdrIpaddressParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__WebsiteAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getWebsiteSTRINGTerminalRuleCall_0_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getConnectionAccess().getWebsiteSTRINGTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connection__PortnumberAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectionAccess().getPortnumberPortParserRuleCall_2_0()); }
		rulePort
		{ after(grammarAccess.getConnectionAccess().getPortnumberPortParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBoardAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__BoardMembersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardAccess().getBoardMembersBoardMemberParserRuleCall_3_0()); }
		ruleBoardMember
		{ after(grammarAccess.getBoardAccess().getBoardMembersBoardMemberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__ExpMembersAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalActionAccess().getExpMembersExpMemberParserRuleCall_0_5_0()); }
		ruleExpMember
		{ after(grammarAccess.getConditionalActionAccess().getExpMembersExpMemberParserRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAction__ExpMembersAssignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalActionAccess().getExpMembersExpMemberParserRuleCall_1_5_0()); }
		ruleExpMember
		{ after(grammarAccess.getConditionalActionAccess().getExpMembersExpMemberParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensorTypesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSensorTypesSensorTypeParserRuleCall_1_0()); }
		ruleSensorType
		{ after(grammarAccess.getSensorAccess().getSensorTypesSensorTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensorTypesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSensorTypesSensorTypeParserRuleCall_2_1_0()); }
		ruleSensorType
		{ after(grammarAccess.getSensorAccess().getSensorTypesSensorTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__ActuatorTypesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorAccess().getActuatorTypesActuatorTypeParserRuleCall_1_0()); }
		ruleActuatorType
		{ after(grammarAccess.getActuatorAccess().getActuatorTypesActuatorTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__ActuatorTypesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorAccess().getActuatorTypesActuatorTypeParserRuleCall_2_1_0()); }
		ruleActuatorType
		{ after(grammarAccess.getActuatorAccess().getActuatorTypesActuatorTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__TypeNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorTypeAccess().getTypeNameActuatorNameParserRuleCall_0_0()); }
		ruleActuatorName
		{ after(grammarAccess.getActuatorTypeAccess().getTypeNameActuatorNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorTypeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getActuatorTypeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__PinsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorTypeAccess().getPinsPinParserRuleCall_3_1_0()); }
		rulePin
		{ after(grammarAccess.getActuatorTypeAccess().getPinsPinParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__TypeNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorTypeAccess().getTypeNameSensorNameParserRuleCall_0_0()); }
		ruleSensorName
		{ after(grammarAccess.getSensorTypeAccess().getTypeNameSensorNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorTypeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSensorTypeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__PinsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorTypeAccess().getPinsPinParserRuleCall_3_1_0()); }
		rulePin
		{ after(grammarAccess.getSensorTypeAccess().getPinsPinParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin__PowerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPinAccess().getPowerINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getPinAccess().getPowerINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin__InputAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPinAccess().getInputINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getPinAccess().getInputINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_1_2_0()); }
		ruleCondition
		{ after(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_2_2_0()); }
		ruleCondition
		{ after(grammarAccess.getConditionAccess().getConditionConditionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValueTrueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBooleanAccess().getValueTrueKeyword_0_0()); }
			'true'
			{ after(grammarAccess.getBooleanAccess().getValueTrueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBooleanAccess().getValueTrueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0()); }
		(
			{ before(grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0()); }
			'false'
			{ after(grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0()); }
		)
		{ after(grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpAccess().getLeftExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getComparisonExpAccess().getLeftExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpAccess().getOpOperatorParserRuleCall_1_0()); }
		ruleOperator
		{ after(grammarAccess.getComparisonExpAccess().getOpOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExp__RigthAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpAccess().getRigthExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getComparisonExpAccess().getRigthExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BoardAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getBoardBoardCrossReference_2_0_0()); }
		(
			{ before(grammarAccess.getFunctionAccess().getBoardBoardIDTerminalRuleCall_2_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionAccess().getBoardBoardIDTerminalRuleCall_2_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionAccess().getBoardBoardCrossReference_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__BoardAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorFunctionAccess().getBoardBoardCrossReference_0_0_0()); }
		(
			{ before(grammarAccess.getActuatorFunctionAccess().getBoardBoardIDTerminalRuleCall_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getActuatorFunctionAccess().getBoardBoardIDTerminalRuleCall_0_0_0_1()); }
		)
		{ after(grammarAccess.getActuatorFunctionAccess().getBoardBoardCrossReference_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__ActuatorTypeAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeCrossReference_0_2_0()); }
		(
			{ before(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeIDTerminalRuleCall_0_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeIDTerminalRuleCall_0_2_0_1()); }
		)
		{ after(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeCrossReference_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorFunction__ActuatorTypeAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getActuatorFunctionAccess().getActuatorTypeActuatorTypeCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__BoardAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorFunctionAccess().getBoardBoardCrossReference_0_0_0()); }
		(
			{ before(grammarAccess.getSensorFunctionAccess().getBoardBoardIDTerminalRuleCall_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSensorFunctionAccess().getBoardBoardIDTerminalRuleCall_0_0_0_1()); }
		)
		{ after(grammarAccess.getSensorFunctionAccess().getBoardBoardCrossReference_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__SensorTypeAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeCrossReference_0_2_0()); }
		(
			{ before(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeIDTerminalRuleCall_0_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeIDTerminalRuleCall_0_2_0_1()); }
		)
		{ after(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeCrossReference_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorFunction__SensorTypeAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getSensorFunctionAccess().getSensorTypeSensorTypeCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
