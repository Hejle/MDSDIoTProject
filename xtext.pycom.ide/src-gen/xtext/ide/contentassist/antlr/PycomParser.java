/*
 * generated by Xtext 2.17.0
 */
package xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalPycomParser;
import xtext.services.PycomGrammarAccess;

public class PycomParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PycomGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PycomGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConnectionAccess().getAlternatives_0(), "rule__Connection__Alternatives_0");
			builder.put(grammarAccess.getBoardMemberAccess().getAlternatives(), "rule__BoardMember__Alternatives");
			builder.put(grammarAccess.getConditionalActionAccess().getAlternatives(), "rule__ConditionalAction__Alternatives");
			builder.put(grammarAccess.getExpMemberAccess().getAlternatives(), "rule__ExpMember__Alternatives");
			builder.put(grammarAccess.getCommunicationAccess().getAlternatives_2(), "rule__Communication__Alternatives_2");
			builder.put(grammarAccess.getSensorNameAccess().getAlternatives(), "rule__SensorName__Alternatives");
			builder.put(grammarAccess.getActuatorNameAccess().getAlternatives(), "rule__ActuatorName__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getLogicExpAccess().getAlternatives(), "rule__LogicExp__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getAlternatives(), "rule__Function__Alternatives");
			builder.put(grammarAccess.getActuatorFunctionAccess().getAlternatives(), "rule__ActuatorFunction__Alternatives");
			builder.put(grammarAccess.getSensorFunctionAccess().getAlternatives(), "rule__SensorFunction__Alternatives");
			builder.put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
			builder.put(grammarAccess.getServerAccess().getGroup(), "rule__Server__Group__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getIpaddressAccess().getGroup(), "rule__Ipaddress__Group__0");
			builder.put(grammarAccess.getBoardAccess().getGroup(), "rule__Board__Group__0");
			builder.put(grammarAccess.getConditionalActionAccess().getGroup_0(), "rule__ConditionalAction__Group_0__0");
			builder.put(grammarAccess.getConditionalActionAccess().getGroup_1(), "rule__ConditionalAction__Group_1__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_2(), "rule__Sensor__Group_2__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup_2(), "rule__Actuator__Group_2__0");
			builder.put(grammarAccess.getCommunicationAccess().getGroup(), "rule__Communication__Group__0");
			builder.put(grammarAccess.getActuatorTypeAccess().getGroup(), "rule__ActuatorType__Group__0");
			builder.put(grammarAccess.getActuatorTypeAccess().getGroup_3(), "rule__ActuatorType__Group_3__0");
			builder.put(grammarAccess.getSensorTypeAccess().getGroup(), "rule__SensorType__Group__0");
			builder.put(grammarAccess.getSensorTypeAccess().getGroup_3(), "rule__SensorType__Group_3__0");
			builder.put(grammarAccess.getPinAccess().getGroup(), "rule__Pin__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_2(), "rule__Condition__Group_2__0");
			builder.put(grammarAccess.getComparisonExpAccess().getGroup(), "rule__ComparisonExp__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_2(), "rule__Function__Group_2__0");
			builder.put(grammarAccess.getActuatorFunctionAccess().getGroup_0(), "rule__ActuatorFunction__Group_0__0");
			builder.put(grammarAccess.getActuatorFunctionAccess().getGroup_1(), "rule__ActuatorFunction__Group_1__0");
			builder.put(grammarAccess.getSensorFunctionAccess().getGroup_0(), "rule__SensorFunction__Group_0__0");
			builder.put(grammarAccess.getSensorFunctionAccess().getGroup_1(), "rule__SensorFunction__Group_1__0");
			builder.put(grammarAccess.getSystemAccess().getBoardsAssignment_0(), "rule__System__BoardsAssignment_0");
			builder.put(grammarAccess.getSystemAccess().getServersAssignment_1(), "rule__System__ServersAssignment_1");
			builder.put(grammarAccess.getServerAccess().getNameAssignment_1(), "rule__Server__NameAssignment_1");
			builder.put(grammarAccess.getServerAccess().getConnAssignment_3(), "rule__Server__ConnAssignment_3");
			builder.put(grammarAccess.getServerAccess().getExpsAssignment_6(), "rule__Server__ExpsAssignment_6");
			builder.put(grammarAccess.getConnectionAccess().getIpAdrAssignment_0_0(), "rule__Connection__IpAdrAssignment_0_0");
			builder.put(grammarAccess.getConnectionAccess().getWebsiteAssignment_0_1(), "rule__Connection__WebsiteAssignment_0_1");
			builder.put(grammarAccess.getConnectionAccess().getPortnumberAssignment_2(), "rule__Connection__PortnumberAssignment_2");
			builder.put(grammarAccess.getBoardAccess().getNameAssignment_1(), "rule__Board__NameAssignment_1");
			builder.put(grammarAccess.getBoardAccess().getBoardMembersAssignment_3(), "rule__Board__BoardMembersAssignment_3");
			builder.put(grammarAccess.getConditionalActionAccess().getExpMembersAssignment_0_5(), "rule__ConditionalAction__ExpMembersAssignment_0_5");
			builder.put(grammarAccess.getConditionalActionAccess().getExpMembersAssignment_1_5(), "rule__ConditionalAction__ExpMembersAssignment_1_5");
			builder.put(grammarAccess.getSensorAccess().getSensorTypesAssignment_1(), "rule__Sensor__SensorTypesAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getSensorTypesAssignment_2_1(), "rule__Sensor__SensorTypesAssignment_2_1");
			builder.put(grammarAccess.getActuatorAccess().getActuatorTypesAssignment_1(), "rule__Actuator__ActuatorTypesAssignment_1");
			builder.put(grammarAccess.getActuatorAccess().getActuatorTypesAssignment_2_1(), "rule__Actuator__ActuatorTypesAssignment_2_1");
			builder.put(grammarAccess.getActuatorTypeAccess().getTypeNameAssignment_0(), "rule__ActuatorType__TypeNameAssignment_0");
			builder.put(grammarAccess.getActuatorTypeAccess().getNameAssignment_2(), "rule__ActuatorType__NameAssignment_2");
			builder.put(grammarAccess.getActuatorTypeAccess().getPinsAssignment_3_1(), "rule__ActuatorType__PinsAssignment_3_1");
			builder.put(grammarAccess.getSensorTypeAccess().getTypeNameAssignment_0(), "rule__SensorType__TypeNameAssignment_0");
			builder.put(grammarAccess.getSensorTypeAccess().getNameAssignment_2(), "rule__SensorType__NameAssignment_2");
			builder.put(grammarAccess.getSensorTypeAccess().getPinsAssignment_3_1(), "rule__SensorType__PinsAssignment_3_1");
			builder.put(grammarAccess.getPinAccess().getPowerAssignment_0(), "rule__Pin__PowerAssignment_0");
			builder.put(grammarAccess.getPinAccess().getInputAssignment_2(), "rule__Pin__InputAssignment_2");
			builder.put(grammarAccess.getConditionAccess().getConditionAssignment_1_2(), "rule__Condition__ConditionAssignment_1_2");
			builder.put(grammarAccess.getConditionAccess().getConditionAssignment_2_2(), "rule__Condition__ConditionAssignment_2_2");
			builder.put(grammarAccess.getBooleanAccess().getValueAssignment_0(), "rule__Boolean__ValueAssignment_0");
			builder.put(grammarAccess.getBooleanAccess().getValueAssignment_1(), "rule__Boolean__ValueAssignment_1");
			builder.put(grammarAccess.getComparisonExpAccess().getLeftAssignment_0(), "rule__ComparisonExp__LeftAssignment_0");
			builder.put(grammarAccess.getComparisonExpAccess().getOpAssignment_1(), "rule__ComparisonExp__OpAssignment_1");
			builder.put(grammarAccess.getComparisonExpAccess().getRigthAssignment_2(), "rule__ComparisonExp__RigthAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getBoardAssignment_2_0(), "rule__Function__BoardAssignment_2_0");
			builder.put(grammarAccess.getActuatorFunctionAccess().getBoardAssignment_0_0(), "rule__ActuatorFunction__BoardAssignment_0_0");
			builder.put(grammarAccess.getActuatorFunctionAccess().getActuatorTypeAssignment_0_2(), "rule__ActuatorFunction__ActuatorTypeAssignment_0_2");
			builder.put(grammarAccess.getActuatorFunctionAccess().getActuatorTypeAssignment_1_0(), "rule__ActuatorFunction__ActuatorTypeAssignment_1_0");
			builder.put(grammarAccess.getSensorFunctionAccess().getBoardAssignment_0_0(), "rule__SensorFunction__BoardAssignment_0_0");
			builder.put(grammarAccess.getSensorFunctionAccess().getSensorTypeAssignment_0_2(), "rule__SensorFunction__SensorTypeAssignment_0_2");
			builder.put(grammarAccess.getSensorFunctionAccess().getSensorTypeAssignment_1_0(), "rule__SensorFunction__SensorTypeAssignment_1_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PycomGrammarAccess grammarAccess;

	@Override
	protected InternalPycomParser createParser() {
		InternalPycomParser result = new InternalPycomParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PycomGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PycomGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
